{"ast":null,"code":"import _objectWithoutProperties from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toArray from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _objectSpread from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"modelValue\"];\nimport \"core-js/modules/es.array.slice.js\";\nimport { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps, createElementVNode as _createElementVNode } from \"vue\";\n// Components\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { makeVSnackbarProps, VSnackbar } from \"../VSnackbar/VSnackbar.js\"; // Composables\nimport { useLocale } from \"../../composables/locale.js\"; // Utilities\nimport { computed, nextTick, shallowRef, watch } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\nexport var makeVSnackbarQueueProps = propsFactory(_objectSpread({\n  // TODO: Port this to Snackbar on dev\n  closable: [Boolean, String],\n  closeText: {\n    type: String,\n    \"default\": '$vuetify.dismiss'\n  },\n  modelValue: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  }\n}, omit(makeVSnackbarProps(), ['modelValue'])), 'VSnackbarQueue');\nexport var VSnackbarQueue = genericComponent()({\n  name: 'VSnackbarQueue',\n  props: makeVSnackbarQueueProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n      slots = _ref.slots;\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var isActive = shallowRef(false);\n    var isVisible = shallowRef(false);\n    var current = shallowRef();\n    watch(function () {\n      return props.modelValue.length;\n    }, function (val, oldVal) {\n      if (!isVisible.value && val > oldVal) {\n        showNext();\n      }\n    });\n    watch(isActive, function (val) {\n      if (val) isVisible.value = true;\n    });\n    function onAfterLeave() {\n      if (props.modelValue.length) {\n        showNext();\n      } else {\n        current.value = undefined;\n        isVisible.value = false;\n      }\n    }\n    function showNext() {\n      var _props$modelValue = _toArray(props.modelValue),\n        next = _props$modelValue[0],\n        rest = _props$modelValue.slice(1);\n      emit('update:modelValue', rest);\n      current.value = typeof next === 'string' ? {\n        text: next\n      } : next;\n      nextTick(function () {\n        isActive.value = true;\n      });\n    }\n    function onClickClose() {\n      isActive.value = false;\n    }\n    var btnProps = computed(function () {\n      return {\n        color: typeof props.closable === 'string' ? props.closable : undefined,\n        text: t(props.closeText)\n      };\n    });\n    useRender(function () {\n      var hasActions = !!(props.closable || slots.actions);\n      var _VSnackbar$filterProp = VSnackbar.filterProps(props),\n        _ = _VSnackbar$filterProp.modelValue,\n        snackbarProps = _objectWithoutProperties(_VSnackbar$filterProp, _excluded);\n      return _createElementVNode(_Fragment, null, [isVisible.value && !!current.value && (slots[\"default\"] ? _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VSnackbar: current.value\n        }\n      }, {\n        \"default\": function _default() {\n          return [slots[\"default\"]({\n            item: current.value\n          })];\n        }\n      }) : _createVNode(VSnackbar, _mergeProps(snackbarProps, current.value, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return isActive.value = $event;\n        },\n        \"onAfterLeave\": onAfterLeave\n      }), {\n        text: slots.text ? function () {\n          var _slots$text;\n          return (_slots$text = slots.text) === null || _slots$text === void 0 ? void 0 : _slots$text.call(slots, {\n            item: current.value\n          });\n        } : undefined,\n        actions: hasActions ? function () {\n          return _createElementVNode(_Fragment, null, [!slots.actions ? _createVNode(VBtn, _mergeProps(btnProps.value, {\n            \"onClick\": onClickClose\n          }), null) : _createVNode(VDefaultsProvider, {\n            \"defaults\": {\n              VBtn: btnProps.value\n            }\n          }, {\n            \"default\": function _default() {\n              return [slots.actions({\n                item: current.value,\n                props: {\n                  onClick: onClickClose\n                }\n              })];\n            }\n          })]);\n        } : undefined\n      }))]);\n    });\n  }\n});","map":{"version":3,"names":["VBtn","VDefaultsProvider","makeVSnackbarProps","VSnackbar","useLocale","computed","nextTick","shallowRef","watch","genericComponent","omit","propsFactory","useRender","makeVSnackbarQueueProps","_objectSpread","closable","Boolean","String","closeText","type","modelValue","Array","default","VSnackbarQueue","name","props","emits","updateModelValue","val","setup","_ref","emit","slots","_useLocale","t","isActive","isVisible","current","length","oldVal","value","showNext","onAfterLeave","undefined","_props$modelValue","_toArray","next","rest","slice","text","onClickClose","btnProps","color","hasActions","actions","_VSnackbar$filterProp","filterProps","_","snackbarProps","_objectWithoutProperties","_excluded","_createElementVNode","_Fragment","_createVNode","item","_mergeProps","onUpdateModelValue","$event","_slots$text","call","onClick"],"sources":["../../../src/components/VSnackbarQueue/VSnackbarQueue.tsx"],"sourcesContent":["// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { makeVSnackbarProps, VSnackbar } from '@/components/VSnackbar/VSnackbar'\n\n// Composables\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { computed, nextTick, shallowRef, watch } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType, VNodeProps } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport type VSnackbarQueueSlots<T extends string | SnackbarMessage> = {\n  default: { item: T }\n  text: { item: T }\n  actions: {\n    item: T\n    props: {\n      onClick: () => void\n    }\n  }\n}\n\nexport type SnackbarMessage =\n  | string\n  | (Omit<\n    VSnackbar['$props'],\n    | 'modelValue'\n    | 'onUpdate:modelValue'\n    | 'activator'\n    | 'activatorProps'\n    | 'closeDelay'\n    | 'openDelay'\n    | 'openOnClick'\n    | 'openOnFocus'\n    | 'openOnHover'\n    | 'style'\n    | '$children'\n    | 'v-slots'\n    | `v-slot:${string}`\n    | keyof VNodeProps\n  > & { style?: any })\n\nexport const makeVSnackbarQueueProps = propsFactory({\n  // TODO: Port this to Snackbar on dev\n  closable: [Boolean, String],\n  closeText: {\n    type: String,\n    default: '$vuetify.dismiss',\n  },\n  modelValue: {\n    type: Array as PropType<readonly SnackbarMessage[]>,\n    default: () => [],\n  },\n\n  ...omit(makeVSnackbarProps(), ['modelValue']),\n}, 'VSnackbarQueue')\n\nexport const VSnackbarQueue = genericComponent<new <T extends readonly SnackbarMessage[]> (\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => void\n  },\n  slots: VSnackbarQueueSlots<T[number]>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSnackbarQueue',\n\n  props: makeVSnackbarQueueProps(),\n\n  emits: {\n    'update:modelValue': (val: SnackbarMessage[]) => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const { t } = useLocale()\n\n    const isActive = shallowRef(false)\n    const isVisible = shallowRef(false)\n    const current = shallowRef<Exclude<SnackbarMessage, string>>()\n\n    watch(() => props.modelValue.length, (val, oldVal) => {\n      if (!isVisible.value && val > oldVal) {\n        showNext()\n      }\n    })\n    watch(isActive, val => {\n      if (val) isVisible.value = true\n    })\n\n    function onAfterLeave () {\n      if (props.modelValue.length) {\n        showNext()\n      } else {\n        current.value = undefined\n        isVisible.value = false\n      }\n    }\n    function showNext () {\n      const [next, ...rest] = props.modelValue\n      emit('update:modelValue', rest)\n      current.value = typeof next === 'string' ? { text: next } : next\n      nextTick(() => {\n        isActive.value = true\n      })\n    }\n    function onClickClose () {\n      isActive.value = false\n    }\n\n    const btnProps = computed(() => ({\n      color: typeof props.closable === 'string' ? props.closable : undefined,\n      text: t(props.closeText),\n    }))\n\n    useRender(() => {\n      const hasActions = !!(props.closable || slots.actions)\n      const { modelValue: _, ...snackbarProps } = VSnackbar.filterProps(props as any)\n\n      return (\n        <>\n          { isVisible.value && !!current.value && (\n            slots.default\n              ? (\n                <VDefaultsProvider defaults={{ VSnackbar: current.value }}>\n                  { slots.default({ item: current.value }) }\n                </VDefaultsProvider>\n              ) : (\n                <VSnackbar\n                  { ...snackbarProps }\n                  { ...current.value }\n                  v-model={ isActive.value }\n                  onAfterLeave={ onAfterLeave }\n                >\n                  {{\n                    text: slots.text ? () => slots.text?.({ item: current.value! }) : undefined,\n                    actions: hasActions ? () => (\n                      <>\n                        { !slots.actions ? (\n                          <VBtn\n                            { ...btnProps.value }\n                            onClick={ onClickClose }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            defaults={{\n                              VBtn: btnProps.value,\n                            }}\n                          >\n                            { slots.actions({\n                              item: current.value!,\n                              props: { onClick: onClickClose },\n                            })}\n                          </VDefaultsProvider>\n                        )}\n                      </>\n                    ) : undefined,\n                  }}\n                </VSnackbar>\n              )\n          )}\n        </>\n      )\n    })\n  },\n})\n\nexport type VSnackbarQueue = InstanceType<typeof VSnackbarQueue>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}