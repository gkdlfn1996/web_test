{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, onMounted } from 'vue';\nimport { fetchShots, fetchProjects, fetchVersionsForShot } from './api';\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup: function setup() {\n    var projectName = ref('');\n    var projects = ref([]);\n    var shots = ref([]); // 선택된 프로젝트의 샷 목록 (autocomplete items)\n    var versions = ref([]); // 버전 목록을 저장할 ref 추가\n    var username = ref(''); // 로그인 사용자 이름\n    var password = ref(''); // 로그인 비밀번호\n    var loggedInUser = ref(null); // 로그인 성공 시 사용자 이름 저장\n    var loggedInUserId = ref(null); // 로그인 성공 시 사용자 ID 저장\n    var notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n    var loginError = ref(null); // 로그인 에러 메시지\n    var selectedShotName = ref(''); // 선택된 샷 이름\n\n    // DB 테스트 관련 변수 추가\n    var dbTestResult = ref(null);\n    var dbTestError = ref(null);\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var projData;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _context.n = 1;\n            return fetchProjects();\n          case 1:\n            projData = _context.v;\n            projects.value = projData.projects || [];\n          case 2:\n            return _context.a(2);\n        }\n      }, _callee);\n    })));\n\n    // 프로젝트 선택 시 해당 프로젝트의 샷 목록을 불러오는 함수\n    function onProjectSelected() {\n      return _onProjectSelected.apply(this, arguments);\n    } // 선택된 샷의 버전 목록을 불러오는 함수\n    function _onProjectSelected() {\n      _onProjectSelected = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var data;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              selectedShotName.value = ''; // 프로젝트 변경 시 샷 선택 초기화\n              versions.value = []; // 프로젝트 변경 시 버전 목록 초기화\n              if (!projectName.value) {\n                _context2.n = 2;\n                break;\n              }\n              _context2.n = 1;\n              return fetchShots(projectName.value);\n            case 1:\n              data = _context2.v;\n              shots.value = data.shots || [];\n              _context2.n = 3;\n              break;\n            case 2:\n              shots.value = [];\n            case 3:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }));\n      return _onProjectSelected.apply(this, arguments);\n    }\n    function loadVersions() {\n      return _loadVersions.apply(this, arguments);\n    }\n    function _loadVersions() {\n      _loadVersions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var selectedShot, data;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              selectedShot = shots.value.find(function (s) {\n                return s.code === selectedShotName.value;\n              });\n              if (!selectedShot) {\n                _context3.n = 2;\n                break;\n              }\n              _context3.n = 1;\n              return fetchVersionsForShot(selectedShot.id);\n            case 1:\n              data = _context3.v;\n              versions.value = data.versions || [];\n              // 각 버전에 대한 기존 노트 내용을 불러와 notesContent 초기화\n              if (!loggedInUserId.value) {\n                _context3.n = 2;\n                break;\n              }\n              _context3.n = 2;\n              return loadExistingNotesForVersions();\n            case 2:\n              return _context3.a(2);\n          }\n        }, _callee3);\n      }));\n      return _loadVersions.apply(this, arguments);\n    }\n    function clear() {\n      projectName.value = '';\n      shots.value = [];\n      versions.value = []; // 버전 목록도 초기화\n      selectedShotName.value = ''; // 선택된 샷 이름도 초기화\n      loggedInUser.value = null; // 로그인 정보 초기화\n      loggedInUserId.value = null; // 로그인 ID 초기화\n      username.value = '';\n      password.value = '';\n      loginError.value = null;\n    }\n\n    // 로그인 메서드 추가\n    function login() {\n      return _login.apply(this, arguments);\n    } // 각 버전에 대한 기존 노트 내용을 불러오는 함수\n    function _login() {\n      _login = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var response, _t;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              loginError.value = null; // 에러 메시지 초기화\n              _context4.p = 1;\n              _context4.n = 2;\n              return axios.post('http://localhost:8001/api/auth/login', {\n                username: username.value,\n                password: password.value\n              });\n            case 2:\n              response = _context4.v;\n              if (!response.data.user) {\n                _context4.n = 3;\n                break;\n              }\n              loggedInUser.value = response.data.user.name; // 사용자 이름 저장\n              loggedInUserId.value = response.data.user.id; // 사용자 ID 저장\n              // 로그인 성공 후 기존 노트들을 불러옴\n              _context4.n = 3;\n              return loadExistingNotesForVersions();\n            case 3:\n              _context4.n = 5;\n              break;\n            case 4:\n              _context4.p = 4;\n              _t = _context4.v;\n              console.error('로그인 실패:', _t);\n              loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n              loggedInUser.value = null;\n              loggedInUserId.value = null;\n            case 5:\n              return _context4.a(2);\n          }\n        }, _callee4, null, [[1, 4]]);\n      }));\n      return _login.apply(this, arguments);\n    }\n    function loadExistingNotesForVersions() {\n      return _loadExistingNotesForVersions.apply(this, arguments);\n    } // 노트 저장 메서드 추가\n    function _loadExistingNotesForVersions() {\n      _loadExistingNotesForVersions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n        var _iterator, _step, version, noteData, _t2;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(versions.value);\n              _context5.p = 1;\n              _iterator.s();\n            case 2:\n              if ((_step = _iterator.n()).done) {\n                _context5.n = 5;\n                break;\n              }\n              version = _step.value;\n              _context5.n = 3;\n              return fetchNoteForVersionAndUser(version.id, loggedInUserId.value);\n            case 3:\n              noteData = _context5.v;\n              if (noteData.note) {\n                notesContent.value[version.id] = noteData.note.content;\n              } else {\n                notesContent.value[version.id] = ''; // 노트가 없으면 빈 문자열로 초기화\n              }\n            case 4:\n              _context5.n = 2;\n              break;\n            case 5:\n              _context5.n = 7;\n              break;\n            case 6:\n              _context5.p = 6;\n              _t2 = _context5.v;\n              _iterator.e(_t2);\n            case 7:\n              _context5.p = 7;\n              _iterator.f();\n              return _context5.f(7);\n            case 8:\n              return _context5.a(2);\n          }\n        }, _callee5, null, [[1, 6, 7, 8]]);\n      }));\n      return _loadExistingNotesForVersions.apply(this, arguments);\n    }\n    function saveNote(_x, _x2) {\n      return _saveNote.apply(this, arguments);\n    } // DB 연결 테스트 메서드 추가\n    function _saveNote() {\n      _saveNote = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(versionId, content) {\n        var _t3;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              if (loggedInUserId.value) {\n                _context6.n = 1;\n                break;\n              }\n              console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n              return _context6.a(2);\n            case 1:\n              _context6.p = 1;\n              _context6.n = 2;\n              return axios.post('http://localhost:8001/api/notes', {\n                version_id: versionId,\n                owner_id: loggedInUserId.value,\n                content: content\n              });\n            case 2:\n              console.log(\"Note for version \".concat(versionId, \" saved successfully.\"));\n              _context6.n = 4;\n              break;\n            case 3:\n              _context6.p = 3;\n              _t3 = _context6.v;\n              console.error(\"Note for version \".concat(versionId, \" save failed:\"), _t3);\n            case 4:\n              return _context6.a(2);\n          }\n        }, _callee6, null, [[1, 3]]);\n      }));\n      return _saveNote.apply(this, arguments);\n    }\n    function testDbConnection() {\n      return _testDbConnection.apply(this, arguments);\n    } // v-data-table을 위한 헤더 정의\n    function _testDbConnection() {\n      _testDbConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {\n        var response, _t4;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              dbTestResult.value = null;\n              dbTestError.value = null;\n              _context7.p = 1;\n              _context7.n = 2;\n              return axios.get('http://localhost:8001/db-test');\n            case 2:\n              response = _context7.v;\n              dbTestResult.value = response.data.message;\n              _context7.n = 4;\n              break;\n            case 3:\n              _context7.p = 3;\n              _t4 = _context7.v;\n              console.error('DB 연결 테스트 중 에러 발생:', _t4);\n              dbTestError.value = _t4.message;\n              if (_t4.response && _t4.response.data && _t4.response.data.message) {\n                dbTestError.value = _t4.response.data.message;\n              }\n            case 4:\n              return _context7.a(2);\n          }\n        }, _callee7, null, [[1, 3]]);\n      }));\n      return _testDbConnection.apply(this, arguments);\n    }\n    var versionHeaders = [{\n      title: 'Version',\n      key: 'code',\n      sortable: false\n    }, {\n      title: 'Note',\n      key: 'note',\n      sortable: false\n    }];\n    return {\n      projectName: projectName,\n      projects: projects,\n      shots: shots,\n      selectedShotName: selectedShotName,\n      username: username,\n      password: password,\n      loggedInUser: loggedInUser,\n      loggedInUserId: loggedInUserId,\n      loginError: loginError,\n      versions: versions,\n      onProjectSelected: onProjectSelected,\n      loadVersions: loadVersions,\n      clear: clear,\n      versionHeaders: versionHeaders,\n      dbTestResult: dbTestResult,\n      dbTestError: dbTestError,\n      testDbConnection: testDbConnection,\n      login: login,\n      saveNote: saveNote\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","fetchShots","fetchProjects","fetchVersionsForShot","axios","setup","projectName","projects","shots","versions","username","password","loggedInUser","loggedInUserId","notesContent","loginError","selectedShotName","dbTestResult","dbTestError","_asyncToGenerator","_regenerator","m","_callee","projData","w","_context","n","v","value","a","onProjectSelected","_onProjectSelected","apply","arguments","_callee2","data","_context2","loadVersions","_loadVersions","_callee3","selectedShot","_context3","find","s","code","id","loadExistingNotesForVersions","clear","login","_login","_callee4","response","_t","_context4","p","post","user","name","console","error","_loadExistingNotesForVersions","_callee5","_iterator","_step","version","noteData","_t2","_context5","_createForOfIteratorHelper","done","fetchNoteForVersionAndUser","note","content","e","f","saveNote","_x","_x2","_saveNote","_callee6","versionId","_t3","_context6","warn","version_id","owner_id","log","concat","testDbConnection","_testDbConnection","_callee7","_t4","_context7","get","message","versionHeaders","title","key","sortable"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <!-- 로그인 섹션 -->\n      <v-container class=\"login-section\">\n        <v-card class=\"pa-5\" elevation=\"2\" v-if=\"!loggedInUser\">\n          <v-card-title class=\"text-h5\">로그인</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"username\"\n              label=\"ShotGrid ID\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              @keyup.enter=\"login\"\n              required\n            ></v-text-field>\n            <v-alert\n              v-if=\"loginError\"\n              type=\"error\"\n              dense\n              text\n              class=\"mb-3\"\n            >{{ loginError }}</v-alert>\n            <v-btn color=\"primary\" @click=\"login\">로그인</v-btn>\n          </v-card-text>\n        </v-card>\n        <v-alert v-else type=\"success\" dense text class=\"mb-5\">\n          환영합니다, {{ loggedInUser }}!\n        </v-alert>\n      </v-container>\n\n      <!-- 기존 UI 섹션 (로그인 성공 시 표시) -->\n      <v-container fluid v-if=\"loggedInUser\" :class=\"{'mt-5': loggedInUser}\">\n        <div class=\"d-flex align-center mb-4\">\n          <v-autocomplete\n            v-model=\"projectName\"\n            label=\"Project\"\n            :items=\"projects\"\n            @update:modelValue=\"onProjectSelected\"\n            class=\"mr-4\"\n          ></v-autocomplete>\n          <v-autocomplete\n            v-model=\"selectedShotName\"\n            label=\"Shot\"\n            :items=\"shots.map(s => s.code)\"\n            :disabled=\"!shots.length\"\n            class=\"mr-4\"\n          ></v-autocomplete>\n          <v-btn @click=\"loadVersions\" :disabled=\"!selectedShotName\">OK</v-btn>\n          <v-btn @click=\"clear\" class=\"ml-4\">Clear</v-btn>\n        </div>\n\n        <!-- 버전 목록 테이블 -->\n        <div class=\"versions-section\" v-if=\"versions.length\">\n          <h2>Version</h2>\n          <v-data-table\n            :headers=\"versionHeaders\"\n            :items=\"versions\"\n            item-key=\"id\"\n            class=\"elevation-1\"\n            hide-default-footer\n            disable-pagination\n          >\n            <template v-slot:item.note=\"{ item }\">\n              <div class=\"note-section\">\n                <div class=\"my-note\">\n                  <h3>My Draft Note ({{ item.code }})</h3>\n                  <v-textarea\n                    label=\"여기에 노트를 작성하세요\"\n                    rows=\"3\"\n                    v-model=\"notesContent[item.id]\"\n                    @input=\"saveNote(item.id, notesContent[item.id])\"\n                    variant=\"outlined\"\n                  ></v-textarea>\n                </div>\n                <div class=\"other-notes\">\n                  <h3>Others Draft Notes</h3>\n                  <p>다른 사람의 노트 내용이 여기에 실시간으로 표시됩니다.</p>\n                </div>\n              </div>\n            </template>\n          </v-data-table>\n        </div>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { fetchShots, fetchProjects, fetchVersionsForShot } from './api'\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup() {\n    const projectName = ref('')\n    const projects = ref([])\n    const shots = ref([]) // 선택된 프로젝트의 샷 목록 (autocomplete items)\n    const versions = ref([]) // 버전 목록을 저장할 ref 추가\n    const username = ref('') // 로그인 사용자 이름\n    const password = ref('') // 로그인 비밀번호\n    const loggedInUser = ref(null) // 로그인 성공 시 사용자 이름 저장\n    const loggedInUserId = ref(null) // 로그인 성공 시 사용자 ID 저장\n    const notesContent = ref({}) // 각 버전별 노트 내용을 저장할 객체\n    const loginError = ref(null) // 로그인 에러 메시지\n    const selectedShotName = ref('') // 선택된 샷 이름\n\n    // DB 테스트 관련 변수 추가\n    const dbTestResult = ref(null);\n    const dbTestError = ref(null);\n\n  onMounted(\n      async () => {\n        const projData = await fetchProjects()\n        projects.value = projData.projects || []\n    })\n\n    // 프로젝트 선택 시 해당 프로젝트의 샷 목록을 불러오는 함수\n    async function onProjectSelected() {\n      selectedShotName.value = ''; // 프로젝트 변경 시 샷 선택 초기화\n      versions.value = []; // 프로젝트 변경 시 버전 목록 초기화\n      if (projectName.value) {\n        const data = await fetchShots(projectName.value);\n        shots.value = data.shots || [];\n      } else {\n        shots.value = [];\n      }\n    }\n\n    // 선택된 샷의 버전 목록을 불러오는 함수\n    async function loadVersions() {\n      const selectedShot = shots.value.find(s => s.code === selectedShotName.value);\n      if (selectedShot) {\n        const data = await fetchVersionsForShot(selectedShot.id);\n        versions.value = data.versions || [];\n        // 각 버전에 대한 기존 노트 내용을 불러와 notesContent 초기화\n        if (loggedInUserId.value) { // 로그인된 사용자만 노트 불러오기\n          await loadExistingNotesForVersions();\n        }\n      }\n    }\n\n    function clear() {\n      projectName.value = ''\n      shots.value = []\n      versions.value = [] // 버전 목록도 초기화\n      selectedShotName.value = '' // 선택된 샷 이름도 초기화\n      loggedInUser.value = null; // 로그인 정보 초기화\n      loggedInUserId.value = null; // 로그인 ID 초기화\n      username.value = '';\n      password.value = '';\n      loginError.value = null;\n    }\n\n    // 로그인 메서드 추가\n    async function login() {\n      loginError.value = null; // 에러 메시지 초기화\n      try {\n        const response = await axios.post('http://localhost:8001/api/auth/login', {\n          username: username.value,\n          password: password.value,\n        });\n        if (response.data.user) {\n          loggedInUser.value = response.data.user.name; // 사용자 이름 저장\n          loggedInUserId.value = response.data.user.id; // 사용자 ID 저장\n          // 로그인 성공 후 기존 노트들을 불러옴\n          await loadExistingNotesForVersions();\n        }\n      } catch (error) {\n        console.error('로그인 실패:', error);\n        loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n        loggedInUser.value = null;\n        loggedInUserId.value = null;\n      }\n    }\n\n    // 각 버전에 대한 기존 노트 내용을 불러오는 함수\n    async function loadExistingNotesForVersions() {\n      for (const version of versions.value) {\n        const noteData = await fetchNoteForVersionAndUser(version.id, loggedInUserId.value);\n        if (noteData.note) {\n          notesContent.value[version.id] = noteData.note.content;\n        } else {\n          notesContent.value[version.id] = ''; // 노트가 없으면 빈 문자열로 초기화\n        }\n      }\n    }\n\n    // 노트 저장 메서드 추가\n    async function saveNote(versionId, content) {\n      if (!loggedInUserId.value) {\n        console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n        return;\n      }\n      try {\n        await axios.post('http://localhost:8001/api/notes', {\n          version_id: versionId,\n          owner_id: loggedInUserId.value,\n          content: content,\n        });\n        console.log(`Note for version ${versionId} saved successfully.`);\n      } catch (error) {\n        console.error(`Note for version ${versionId} save failed:`, error);\n      }\n    }\n\n    // DB 연결 테스트 메서드 추가\n    async function testDbConnection() {\n      dbTestResult.value = null;\n      dbTestError.value = null;\n      try {\n        const response = await axios.get('http://localhost:8001/db-test');\n        dbTestResult.value = response.data.message;\n      } catch (error) {\n        console.error('DB 연결 테스트 중 에러 발생:', error);\n        dbTestError.value = error.message;\n        if (error.response && error.response.data && error.response.data.message) {\n          dbTestError.value = error.response.data.message;\n        }\n      }\n    }\n\n    // v-data-table을 위한 헤더 정의\n    const versionHeaders = [\n      { title: 'Version', key: 'code', sortable: false },\n      { title: 'Note', key: 'note', sortable: false },\n    ];\n\n    return {\n      projectName,\n      projects,\n      shots,\n      selectedShotName,\n      username,\n      password,\n      loggedInUser,\n      loggedInUserId,\n      loginError,\n      versions,\n      onProjectSelected,\n      loadVersions,\n      clear,\n      versionHeaders,\n      dbTestResult,\n      dbTestError, \n      testDbConnection,\n      login,\n      saveNote\n    }\n  }\n}\n    \n</script>\n\n<style src=\"./assets/styles.css\"></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}