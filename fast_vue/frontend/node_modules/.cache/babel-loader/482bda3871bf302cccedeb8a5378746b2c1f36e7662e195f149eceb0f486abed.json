{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n// frontend/src/composables/useAuth.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nexport default function useAuth() {\n  var username = ref('');\n  var password = ref('');\n  var loggedInUser = ref(null);\n  var loggedInUserId = ref(null);\n  var loginError = ref(null);\n  var login = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var response, _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            loginError.value = null;\n            _context.p = 1;\n            _context.n = 2;\n            return axios.post('/api/auth/login', {\n              // 상대 경로로 변경\n              username: username.value,\n              password: password.value\n            });\n          case 2:\n            response = _context.v;\n            if (response.data.user) {\n              loggedInUser.value = response.data.user.name;\n              loggedInUserId.value = response.data.user.id;\n              sessionStorage.setItem('loggedInUser', JSON.stringify(response.data.user));\n              // 로그인 성공 후 추가적인 로직이 필요하면 여기서 처리하거나,\n              // 이 composable을 사용하는 컴포넌트에서 콜백으로 처리할 수 있습니다.\n            }\n            _context.n = 4;\n            break;\n          case 3:\n            _context.p = 3;\n            _t = _context.v;\n            console.error('로그인 실패:', _t);\n            loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n            loggedInUser.value = null;\n            loggedInUserId.value = null;\n          case 4:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 3]]);\n    }));\n    return function login() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 로그인 상태를 외부에서 감지할 수 있도록 노출\n  var isLoggedIn = ref(false);\n  // onMounted에서 sessionStorage를 확인하는 로직은 App.vue에서 처리하도록 남겨둡니다.\n  // 왜냐하면 App.vue가 전체 앱의 초기화와 관련된 책임을 가지기 때문입니다.\n\n  return {\n    username: username,\n    password: password,\n    loggedInUser: loggedInUser,\n    loggedInUserId: loggedInUserId,\n    loginError: loginError,\n    login: login,\n    isLoggedIn: isLoggedIn // App.vue에서 로그인 상태를 판단하는 데 사용\n  };\n}","map":{"version":3,"names":["ref","axios","useAuth","username","password","loggedInUser","loggedInUserId","loginError","login","_ref","_asyncToGenerator","_regenerator","m","_callee","response","_t","w","_context","n","value","p","post","v","data","user","name","id","sessionStorage","setItem","JSON","stringify","console","error","a","apply","arguments","isLoggedIn"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/composables/useAuth.js"],"sourcesContent":["// frontend/src/composables/useAuth.js\nimport { ref } from 'vue';\nimport axios from 'axios';\n\nexport default function useAuth() {\n  const username = ref('');\n  const password = ref('');\n  const loggedInUser = ref(null);\n  const loggedInUserId = ref(null);\n  const loginError = ref(null);\n\n  const login = async () => {\n    loginError.value = null;\n    try {\n      const response = await axios.post('/api/auth/login', { // 상대 경로로 변경\n        username: username.value,\n        password: password.value,\n      });\n      if (response.data.user) {\n        loggedInUser.value = response.data.user.name;\n        loggedInUserId.value = response.data.user.id;\n        sessionStorage.setItem('loggedInUser', JSON.stringify(response.data.user));\n        // 로그인 성공 후 추가적인 로직이 필요하면 여기서 처리하거나,\n        // 이 composable을 사용하는 컴포넌트에서 콜백으로 처리할 수 있습니다.\n      }\n    } catch (error) {\n      console.error('로그인 실패:', error);\n      loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n      loggedInUser.value = null;\n      loggedInUserId.value = null;\n    }\n  };\n\n  // 로그인 상태를 외부에서 감지할 수 있도록 노출\n  const isLoggedIn = ref(false);\n  // onMounted에서 sessionStorage를 확인하는 로직은 App.vue에서 처리하도록 남겨둡니다.\n  // 왜냐하면 App.vue가 전체 앱의 초기화와 관련된 책임을 가지기 때문입니다.\n\n  return {\n    username,\n    password,\n    loggedInUser,\n    loggedInUserId,\n    loginError,\n    login,\n    isLoggedIn // App.vue에서 로그인 상태를 판단하는 데 사용\n  };\n}"],"mappings":";;;;;AAAA;AACA,SAASA,GAAG,QAAQ,KAAK;AACzB,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,OAAOA,CAAA,EAAG;EAChC,IAAMC,QAAQ,GAAGH,GAAG,CAAC,EAAE,CAAC;EACxB,IAAMI,QAAQ,GAAGJ,GAAG,CAAC,EAAE,CAAC;EACxB,IAAMK,YAAY,GAAGL,GAAG,CAAC,IAAI,CAAC;EAC9B,IAAMM,cAAc,GAAGN,GAAG,CAAC,IAAI,CAAC;EAChC,IAAMO,UAAU,GAAGP,GAAG,CAAC,IAAI,CAAC;EAE5B,IAAMQ,KAAK;IAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAAG,SAAAC,QAAA;MAAA,IAAAC,QAAA,EAAAC,EAAA;MAAA,OAAAJ,YAAA,GAAAK,CAAA,WAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,CAAA;UAAA;YACZX,UAAU,CAACY,KAAK,GAAG,IAAI;YAACF,QAAA,CAAAG,CAAA;YAAAH,QAAA,CAAAC,CAAA;YAAA,OAECjB,KAAK,CAACoB,IAAI,CAAC,iBAAiB,EAAE;cAAE;cACrDlB,QAAQ,EAAEA,QAAQ,CAACgB,KAAK;cACxBf,QAAQ,EAAEA,QAAQ,CAACe;YACrB,CAAC,CAAC;UAAA;YAHIL,QAAQ,GAAAG,QAAA,CAAAK,CAAA;YAId,IAAIR,QAAQ,CAACS,IAAI,CAACC,IAAI,EAAE;cACtBnB,YAAY,CAACc,KAAK,GAAGL,QAAQ,CAACS,IAAI,CAACC,IAAI,CAACC,IAAI;cAC5CnB,cAAc,CAACa,KAAK,GAAGL,QAAQ,CAACS,IAAI,CAACC,IAAI,CAACE,EAAE;cAC5CC,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAChB,QAAQ,CAACS,IAAI,CAACC,IAAI,CAAC,CAAC;cAC1E;cACA;YACF;YAACP,QAAA,CAAAC,CAAA;YAAA;UAAA;YAAAD,QAAA,CAAAG,CAAA;YAAAL,EAAA,GAAAE,QAAA,CAAAK,CAAA;YAEDS,OAAO,CAACC,KAAK,CAAC,SAAS,EAAAjB,EAAO,CAAC;YAC/BR,UAAU,CAACY,KAAK,GAAG,yBAAyB;YAC5Cd,YAAY,CAACc,KAAK,GAAG,IAAI;YACzBb,cAAc,CAACa,KAAK,GAAG,IAAI;UAAC;YAAA,OAAAF,QAAA,CAAAgB,CAAA;QAAA;MAAA,GAAApB,OAAA;IAAA,CAE/B;IAAA,gBApBKL,KAAKA,CAAA;MAAA,OAAAC,IAAA,CAAAyB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAoBV;;EAED;EACA,IAAMC,UAAU,GAAGpC,GAAG,CAAC,KAAK,CAAC;EAC7B;EACA;;EAEA,OAAO;IACLG,QAAQ,EAARA,QAAQ;IACRC,QAAQ,EAARA,QAAQ;IACRC,YAAY,EAAZA,YAAY;IACZC,cAAc,EAAdA,cAAc;IACdC,UAAU,EAAVA,UAAU;IACVC,KAAK,EAALA,KAAK;IACL4B,UAAU,EAAVA,UAAU,CAAC;EACb,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}