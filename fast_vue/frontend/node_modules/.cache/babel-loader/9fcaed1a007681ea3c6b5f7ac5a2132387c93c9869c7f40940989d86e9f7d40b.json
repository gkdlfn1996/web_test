{"ast":null,"code":"import _slicedToArray from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VCheckbox.css\";\n\n// Components\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from \"./VCheckboxBtn.js\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.js\"; // Composables\nimport { useFocus } from \"../../composables/focus.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\nimport { useId } from 'vue';\nimport { filterInputAttrs, genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\nexport var makeVCheckboxProps = propsFactory(_objectSpread(_objectSpread({}, makeVInputProps()), omit(makeVCheckboxBtnProps(), ['inline'])), 'VCheckbox');\nexport var VCheckbox = genericComponent()({\n  name: 'VCheckbox',\n  inheritAttrs: false,\n  props: makeVCheckboxProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    },\n    'update:focused': function updateFocused(focused) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n      slots = _ref.slots;\n    var model = useProxiedModel(props, 'modelValue');\n    var _useFocus = useFocus(props),\n      isFocused = _useFocus.isFocused,\n      focus = _useFocus.focus,\n      blur = _useFocus.blur;\n    var uid = useId();\n    useRender(function () {\n      var _filterInputAttrs = filterInputAttrs(attrs),\n        _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n        rootAttrs = _filterInputAttrs2[0],\n        controlAttrs = _filterInputAttrs2[1];\n      var inputProps = VInput.filterProps(props);\n      var checkboxProps = VCheckboxBtn.filterProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-checkbox', props[\"class\"]]\n      }, rootAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"id\": props.id || \"checkbox-\".concat(uid),\n        \"focused\": isFocused.value,\n        \"style\": props.style\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default(_ref2) {\n          var id = _ref2.id,\n            messagesId = _ref2.messagesId,\n            isDisabled = _ref2.isDisabled,\n            isReadonly = _ref2.isReadonly,\n            isValid = _ref2.isValid;\n          return _createVNode(VCheckboxBtn, _mergeProps(checkboxProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs, {\n            \"error\": isValid.value === false,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return model.value = $event;\n            },\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }), slots);\n        }\n      }));\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["makeVCheckboxBtnProps","VCheckboxBtn","makeVInputProps","VInput","useFocus","useProxiedModel","useId","filterInputAttrs","genericComponent","omit","propsFactory","useRender","makeVCheckboxProps","_objectSpread","VCheckbox","name","inheritAttrs","props","emits","updateModelValue","value","updateFocused","focused","setup","_ref","attrs","slots","model","_useFocus","isFocused","focus","blur","uid","_filterInputAttrs","_filterInputAttrs2","_slicedToArray","rootAttrs","controlAttrs","inputProps","filterProps","checkboxProps","_createVNode","_mergeProps","onUpdateModelValue","$event","id","concat","style","default","_ref2","messagesId","isDisabled","isReadonly","isValid"],"sources":["../../../src/components/VCheckbox/VCheckbox.tsx"],"sourcesContent":["// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { useId } from 'vue'\nimport { filterInputAttrs, genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { GenericProps } from '@/util'\n\nexport type VCheckboxSlots = Omit<VInputSlots, 'default'> & VSelectionControlSlots\n\nexport const makeVCheckboxProps = propsFactory({\n  ...makeVInputProps(),\n  ...omit(makeVCheckboxBtnProps(), ['inline']),\n}, 'VCheckbox')\n\nexport const VCheckbox = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VCheckboxSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: makeVCheckboxProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = useId()\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const inputProps = VInput.filterProps(props)\n      const checkboxProps = VCheckboxBtn.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-checkbox',\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ props.id || `checkbox-${uid}` }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                error={ isValid.value === false }\n                v-model={ model.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n"],"mappings":";;;AAAA;AACA;;AAEA;AAAA,SACSA,qBAAqB,EAAEC,YAAY;AAAA,SACnCC,eAAe,EAAEC,MAAM,+BAEhC;AAAA,SACSC,QAAQ;AAAA,SACRC,eAAe,6CAExB;AACA,SAASC,KAAK,QAAQ,KAAK;AAAA,SAClBC,gBAAgB,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,+BAE1E;AAOA,OAAO,IAAMC,kBAAkB,GAAGF,YAAY,CAAAG,aAAA,CAAAA,aAAA,KACzCX,eAAe,CAAC,CAAC,GACjBO,IAAI,CAACT,qBAAqB,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAC1C,WAAW,CAAC;AAEf,OAAO,IAAMc,SAAS,GAAGN,gBAAgB,CAMM,CAAC,CAAC;EAC/CO,IAAI,EAAE,WAAW;EAEjBC,YAAY,EAAE,KAAK;EAEnBC,KAAK,EAAEL,kBAAkB,CAAC,CAAC;EAE3BM,KAAK,EAAE;IACL,mBAAmB,EAAG,SAAtBC,gBAAmBA,CAAGC,KAAU;MAAA,OAAK,IAAI;IAAA;IACzC,gBAAgB,EAAG,SAAnBC,aAAgBA,CAAGC,OAAgB;MAAA,OAAK;IAAA;EAC1C,CAAC;EAEDC,KAAK,WAALA,KAAKA,CAAEN,KAAK,EAAAO,IAAA,EAAoB;IAAA,IAAhBC,KAAK,GAASD,IAAA,CAAdC,KAAK;MAAEC,KAAA,GAAOF,IAAA,CAAPE,KAAA;IACrB,IAAMC,KAAK,GAAGtB,eAAe,CAACY,KAAK,EAAE,YAAY,CAAC;IAClD,IAAAW,SAAA,GAAmCxB,QAAQ,CAACa,KAAK,CAAC;MAA1CY,SAAS,GAAAD,SAAA,CAATC,SAAS;MAAEC,KAAK,GAAAF,SAAA,CAALE,KAAK;MAAEC,IAAA,GAAAH,SAAA,CAAAG,IAAA;IAE1B,IAAMC,GAAG,GAAG1B,KAAK,CAAC,CAAC;IAEnBK,SAAS,CAAC,YAAM;MACd,IAAAsB,iBAAA,GAAkC1B,gBAAgB,CAACkB,KAAK,CAAC;QAAAS,kBAAA,GAAAC,cAAA,CAAAF,iBAAA;QAAlDG,SAAS,GAAAF,kBAAA;QAAEG,YAAY,GAAAH,kBAAA;MAC9B,IAAMI,UAAU,GAAGnC,MAAM,CAACoC,WAAW,CAACtB,KAAK,CAAC;MAC5C,IAAMuB,aAAa,GAAGvC,YAAY,CAACsC,WAAW,CAACtB,KAAK,CAAC;MAErD,OAAAwB,YAAA,CAAAtC,MAAA,EAAAuC,WAAA;QAAA,SAEW,CACL,YAAY,EACZzB,KAAK,SAAM;MACZ,GACImB,SAAS,EACTE,UAAU;QAAA,cACLX,KAAK,CAACP,KAAK;QAAA,gCAAAuB,mBAAAC,MAAA;UAAA,OAAXjB,KAAK,CAACP,KAAK,GAAAwB,MAAA;QAAA;QAAA,MAChB3B,KAAK,CAAC4B,EAAE,gBAAAC,MAAA,CAAgBd,GAAG,CAAE;QAAA,WACxBH,SAAS,CAACT,KAAK;QAAA,SACjBH,KAAK,CAAC8B;MAAK,IAAAlC,aAAA,CAAAA,aAAA,KAGda,KAAK;QACR,WAAS,SAATsB,QAAOA,CAAEC,KAAA;UAAA,IACPJ,EAAE,GAKHI,KAAA,CALCJ,EAAE;YACFK,UAAU,GAIXD,KAAA,CAJCC,UAAU;YACVC,UAAU,GAGXF,KAAA,CAHCE,UAAU;YACVC,UAAU,GAEXH,KAAA,CAFCG,UAAU;YACVC,OAAA,GACDJ,KAAA,CADCI,OAAA;UACD,OAAAZ,YAAA,CAAAxC,YAAA,EAAAyC,WAAA,CAEQF,aAAa;YAAA,MACbK,EAAE,CAACzB,KAAK;YAAA,oBACM8B,UAAU,CAAC9B,KAAK;YAAA,YACxB+B,UAAU,CAAC/B,KAAK;YAAA,YAChBgC,UAAU,CAAChC;UAAK,GACtBiB,YAAY;YAAA,SACTgB,OAAO,CAACjC,KAAK,KAAK,KAAK;YAAA,cACrBO,KAAK,CAACP,KAAK;YAAA,gCAAAuB,mBAAAC,MAAA;cAAA,OAAXjB,KAAK,CAACP,KAAK,GAAAwB,MAAA;YAAA;YAAA,WACXd,KAAK;YAAA,UACNC;UAAI,IACHL,KAAK;QAAA;MAAA,EAElB;IAIT,CAAC,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}