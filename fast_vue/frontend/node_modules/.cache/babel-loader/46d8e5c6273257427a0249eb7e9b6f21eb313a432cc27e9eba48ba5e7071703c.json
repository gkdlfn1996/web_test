{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\n// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser, fetchAllNotesForVersion } from '../api'; // fetchAllNotesForVersion 추가\n\n// Simple debounce utility function\nfunction debounce(func, delay) {\n  var timeoutId;\n  var debounced = function debounced() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var context = this;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(function () {\n      return func.apply(context, args);\n    }, delay);\n  };\n  debounced.cancel = function () {\n    clearTimeout(timeoutId);\n  };\n  return debounced;\n}\nexport default function useNotes(loggedInUserIdRef) {\n  // loggedInUserId를 ref로 받음\n  var notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n  var otherNotes = ref({}); // 다른 사용자들의 노트를 저장할 객체\n  var hasNewOtherNotes = ref({}); // 각 버전별로 새로운 다른 노트가 있는지 여부\n  var isSaving = ref({}); // 저장 상태를 버전 ID별로 관리하는 객체로 초기화\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  var loadVersionNotes = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(versionsToLoad) {\n      var myNotePromises, myNoteResults, allNotesPromises, allNotesResults, newNotesContent, newOtherNotes, _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n            return _context.a(2);\n          case 1:\n            _context.p = 1;\n            // 1. 현재 사용자의 노트를 병렬로 가져옵니다.\n            myNotePromises = versionsToLoad.map(function (version) {\n              return fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value);\n            });\n            _context.n = 2;\n            return Promise.all(myNotePromises);\n          case 2:\n            myNoteResults = _context.v;\n            // 2. 모든 사용자의 노트를 병렬로 가져옵니다.\n            allNotesPromises = versionsToLoad.map(function (version) {\n              return fetchAllNotesForVersion(version.id);\n            });\n            _context.n = 3;\n            return Promise.all(allNotesPromises);\n          case 3:\n            allNotesResults = _context.v;\n            // 가져온 노트 정보로 notesContent와 otherNotes 객체를 만듭니다.\n            newNotesContent = {};\n            newOtherNotes = {};\n            myNoteResults.forEach(function (result, index) {\n              var versionId = versionsToLoad[index].id;\n              newNotesContent[versionId] = result.note ? result.note.content : '';\n            });\n            allNotesResults.forEach(function (notes, index) {\n              var versionId = versionsToLoad[index].id;\n              // 다른 사용자들의 노트만 필터링\n              newOtherNotes[versionId] = notes.filter(function (note) {\n                return note.owner.id !== loggedInUserIdRef.value;\n              });\n            });\n            notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n            otherNotes.value = newOtherNotes;\n            _context.n = 5;\n            break;\n          case 4:\n            _context.p = 4;\n            _t = _context.v;\n            console.error('노트 불러오기 실패:', _t);\n          case 5:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 4]]);\n    }));\n    return function loadVersionNotes(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 실제 백엔드에 노트를 저장하는 내부 함수\n  var _performSave = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(versionId, content) {\n      var startTime, elapsedTime, remainingTime, finishSaving, _t2;\n      return _regenerator().w(function (_context2) {\n        while (1) switch (_context2.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context2.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n            return _context2.a(2);\n          case 1:\n            // 반응형 객체를 직접 수정하여 특정 버전의 저장 상태를 true로 설정\n            isSaving.value[versionId] = true;\n            startTime = Date.now();\n            _context2.p = 2;\n            _context2.n = 3;\n            return axios.post(\"\".concat(process.env.VUE_APP_API_BASE_URL, \"/api/notes\"), {\n              // 환경 변수 사용\n              version_id: versionId,\n              owner_id: loggedInUserIdRef.value,\n              content: content\n            });\n          case 3:\n            console.log(\"Note for version \".concat(versionId, \" saved successfully.\"));\n            _context2.n = 5;\n            break;\n          case 4:\n            _context2.p = 4;\n            _t2 = _context2.v;\n            console.error(\"Note for version \".concat(versionId, \" save failed:\"), _t2);\n          case 5:\n            _context2.p = 5;\n            elapsedTime = Date.now() - startTime;\n            remainingTime = 500 - elapsedTime; // 최소 500ms 유지\n            finishSaving = function finishSaving() {\n              // 저장이 완료되면 해당 버전 ID의 키를 객체에서 삭제\n              delete isSaving.value[versionId];\n            };\n            if (remainingTime > 0) {\n              setTimeout(finishSaving, remainingTime);\n            } else {\n              finishSaving();\n            }\n            return _context2.f(5);\n          case 6:\n            return _context2.a(2);\n        }\n      }, _callee2, null, [[2, 4, 5, 6]]);\n    }));\n    return function _performSave(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // 특정 버전의 다른 사용자 노트를 새로고침하는 함수\n  var reloadOtherNotesForVersion = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(versionId) {\n      var notes, _t3;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context3.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 다른 사용자 노트를 새로고침할 수 없습니다.');\n            return _context3.a(2);\n          case 1:\n            _context3.p = 1;\n            _context3.n = 2;\n            return fetchAllNotesForVersion(versionId);\n          case 2:\n            notes = _context3.v;\n            // 다른 사용자들의 노트만 필터링하여 업데이트\n            otherNotes.value[versionId] = notes.filter(function (note) {\n              return note.owner.id !== loggedInUserIdRef.value;\n            });\n            console.log(\"Other notes for version \".concat(versionId, \" reloaded successfully.\"));\n            _context3.n = 4;\n            break;\n          case 3:\n            _context3.p = 3;\n            _t3 = _context3.v;\n            console.error(\"Failed to reload other notes for version \".concat(versionId, \":\"), _t3);\n          case 4:\n            return _context3.a(2);\n        }\n      }, _callee3, null, [[1, 3]]);\n    }));\n    return function reloadOtherNotesForVersion(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // 디바운싱된 노트 저장 함수 (입력 중 사용)\n  var debouncedSave = debounce(_performSave, 1000); // 1초 디바운스\n\n  // 즉시 저장 함수 (블러 이벤트 등에서 사용)\n  var saveImmediately = _performSave;\n  return {\n    notesContent: notesContent,\n    otherNotes: otherNotes,\n    // 다른 사용자 노트 데이터 노출\n    loadVersionNotes: loadVersionNotes,\n    debouncedSave: debouncedSave,\n    // 외부에는 디바운싱된 함수를 노출\n    saveImmediately: saveImmediately,\n    // 즉시 저장 함수 노출\n    reloadOtherNotesForVersion: reloadOtherNotesForVersion,\n    // 새로고침 함수 노출\n    isSaving: isSaving // 저장 상태 노출\n  };\n}","map":{"version":3,"names":["ref","axios","fetchNoteForVersionAndUser","fetchAllNotesForVersion","debounce","func","delay","timeoutId","debounced","_len","arguments","length","args","Array","_key","context","clearTimeout","setTimeout","apply","cancel","useNotes","loggedInUserIdRef","notesContent","otherNotes","hasNewOtherNotes","isSaving","loadVersionNotes","_ref","_asyncToGenerator","_regenerator","m","_callee","versionsToLoad","myNotePromises","myNoteResults","allNotesPromises","allNotesResults","newNotesContent","newOtherNotes","_t","w","_context","n","value","console","warn","a","p","map","version","id","Promise","all","v","forEach","result","index","versionId","note","content","notes","filter","owner","error","_x","_performSave","_ref2","_callee2","startTime","elapsedTime","remainingTime","finishSaving","_t2","_context2","Date","now","post","concat","process","env","VUE_APP_API_BASE_URL","version_id","owner_id","log","f","_x2","_x3","reloadOtherNotesForVersion","_ref3","_callee3","_t3","_context3","_x4","debouncedSave","saveImmediately"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/composables/useNotes.js"],"sourcesContent":["// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser, fetchAllNotesForVersion } from '../api'; // fetchAllNotesForVersion 추가\n\n// Simple debounce utility function\nfunction debounce(func, delay) {\n  let timeoutId;\n  const debounced = function(...args) {\n    const context = this;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(context, args), delay);\n  };\n  debounced.cancel = () => {\n    clearTimeout(timeoutId);\n  };\n  return debounced;\n}\n\nexport default function useNotes(loggedInUserIdRef) { // loggedInUserId를 ref로 받음\n  const notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n  const otherNotes = ref({}); // 다른 사용자들의 노트를 저장할 객체\n  const hasNewOtherNotes = ref({}); // 각 버전별로 새로운 다른 노트가 있는지 여부\n  const isSaving = ref({}); // 저장 상태를 버전 ID별로 관리하는 객체로 초기화\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  const loadVersionNotes = async (versionsToLoad) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n      return;\n    }\n\n    try {\n      // 1. 현재 사용자의 노트를 병렬로 가져옵니다.\n      const myNotePromises = versionsToLoad.map(version =>\n        fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value)\n      );\n      const myNoteResults = await Promise.all(myNotePromises);\n\n      // 2. 모든 사용자의 노트를 병렬로 가져옵니다.\n      const allNotesPromises = versionsToLoad.map(version =>\n        fetchAllNotesForVersion(version.id)\n      );\n      const allNotesResults = await Promise.all(allNotesPromises);\n\n      // 가져온 노트 정보로 notesContent와 otherNotes 객체를 만듭니다.\n      const newNotesContent = {};\n      const newOtherNotes = {};\n\n      myNoteResults.forEach((result, index) => {\n        const versionId = versionsToLoad[index].id;\n        newNotesContent[versionId] = result.note ? result.note.content : '';\n      });\n\n      allNotesResults.forEach((notes, index) => {\n        const versionId = versionsToLoad[index].id;\n        // 다른 사용자들의 노트만 필터링\n        newOtherNotes[versionId] = notes.filter(note => note.owner.id !== loggedInUserIdRef.value);\n      });\n\n      notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n      otherNotes.value = newOtherNotes;\n    } catch (error) {\n      console.error('노트 불러오기 실패:', error);\n    }\n  };\n\n  // 실제 백엔드에 노트를 저장하는 내부 함수\n  const _performSave = async (versionId, content) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n      return;\n    }\n    // 반응형 객체를 직접 수정하여 특정 버전의 저장 상태를 true로 설정\n    isSaving.value[versionId] = true;\n    const startTime = Date.now();\n\n    try {\n      await axios.post(`${process.env.VUE_APP_API_BASE_URL}/api/notes`, { // 환경 변수 사용\n        version_id: versionId,\n        owner_id: loggedInUserIdRef.value,\n        content: content,\n      });\n      console.log(`Note for version ${versionId} saved successfully.`);\n    } catch (error) {\n      console.error(`Note for version ${versionId} save failed:`, error);\n    } finally {\n      const elapsedTime = Date.now() - startTime;\n      const remainingTime = 500 - elapsedTime; // 최소 500ms 유지\n\n      const finishSaving = () => {\n        // 저장이 완료되면 해당 버전 ID의 키를 객체에서 삭제\n        delete isSaving.value[versionId];\n      };\n\n      if (remainingTime > 0) {\n        setTimeout(finishSaving, remainingTime);\n      } else {\n        finishSaving();\n      }\n    }\n  };\n\n  // 특정 버전의 다른 사용자 노트를 새로고침하는 함수\n  const reloadOtherNotesForVersion = async (versionId) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 다른 사용자 노트를 새로고침할 수 없습니다.');\n      return;\n    }\n    try {\n      const notes = await fetchAllNotesForVersion(versionId);\n      // 다른 사용자들의 노트만 필터링하여 업데이트\n      otherNotes.value[versionId] = notes.filter(note => note.owner.id !== loggedInUserIdRef.value);\n      console.log(`Other notes for version ${versionId} reloaded successfully.`);\n    } catch (error) {\n      console.error(`Failed to reload other notes for version ${versionId}:`, error);\n    }\n  };\n\n  // 디바운싱된 노트 저장 함수 (입력 중 사용)\n  const debouncedSave = debounce(_performSave, 1000); // 1초 디바운스\n\n  // 즉시 저장 함수 (블러 이벤트 등에서 사용)\n  const saveImmediately = _performSave;\n\n  return {\n    notesContent,\n    otherNotes, // 다른 사용자 노트 데이터 노출\n    loadVersionNotes,\n    debouncedSave, // 외부에는 디바운싱된 함수를 노출\n    saveImmediately, // 즉시 저장 함수 노출\n    reloadOtherNotesForVersion, // 새로고침 함수 노출\n    isSaving, // 저장 상태 노출\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}