{"ast":null,"code":"import _objectSpread from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { createElementVNode as _createElementVNode, createVNode as _createVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, withDirectives as _withDirectives } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VIcon } from \"../VIcon/index.js\"; // Composables\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { IconValue } from \"../../composables/icons.js\"; // Directives\nimport vRipple from \"../../directives/ripple/index.js\"; // Utilities\nimport { computed, inject, toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\nexport var makeVExpansionPanelTitleProps = propsFactory(_objectSpread(_objectSpread({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    \"default\": '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    \"default\": '$collapse'\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  \"static\": Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    \"default\": false\n  },\n  readonly: Boolean\n}, makeComponentProps()), makeDimensionProps()), 'VExpansionPanelTitle');\nexport var VExpansionPanelTitle = genericComponent()({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    vRipple: vRipple\n  },\n  props: makeVExpansionPanelTitleProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n    var _useBackgroundColor = useBackgroundColor(function () {\n        return props.color;\n      }),\n      backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n      backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n    var _useDimension = useDimension(props),\n      dimensionStyles = _useDimension.dimensionStyles;\n    var slotProps = computed(function () {\n      return {\n        collapseIcon: props.collapseIcon,\n        disabled: expansionPanel.disabled.value,\n        expanded: expansionPanel.isSelected.value,\n        expandIcon: props.expandIcon,\n        readonly: props.readonly\n      };\n    });\n    var icon = toRef(function () {\n      return expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon;\n    });\n    useRender(function () {\n      var _slots$default;\n      return _withDirectives(_createElementVNode(\"button\", {\n        \"class\": _normalizeClass(['v-expansion-panel-title', {\n          'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          'v-expansion-panel-title--focusable': props.focusable,\n          'v-expansion-panel-title--static': props[\"static\"]\n        }, backgroundColorClasses.value, props[\"class\"]]),\n        \"style\": _normalizeStyle([backgroundColorStyles.value, dimensionStyles.value, props.style]),\n        \"type\": \"button\",\n        \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n        \"disabled\": expansionPanel.disabled.value,\n        \"aria-expanded\": expansionPanel.isSelected.value,\n        \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n      }, [_createElementVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__overlay\"\n      }, null), (_slots$default = slots[\"default\"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, slotProps.value), !props.hideActions && _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VIcon: {\n            icon: icon.value\n          }\n        }\n      }, {\n        \"default\": function _default() {\n          var _slots$actions, _slots$actions2;\n          return [_createElementVNode(\"span\", {\n            \"class\": \"v-expansion-panel-title__icon\"\n          }, [(_slots$actions = (_slots$actions2 = slots.actions) === null || _slots$actions2 === void 0 ? void 0 : _slots$actions2.call(slots, slotProps.value)) !== null && _slots$actions !== void 0 ? _slots$actions : _createVNode(VIcon, null, null)])];\n        }\n      })]), [[vRipple, props.ripple]]);\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["VExpansionPanelSymbol","VDefaultsProvider","VIcon","useBackgroundColor","makeComponentProps","makeDimensionProps","useDimension","IconValue","vRipple","computed","inject","toRef","genericComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","_objectSpread","color","String","expandIcon","type","collapseIcon","hideActions","Boolean","focusable","ripple","Object","readonly","VExpansionPanelTitle","name","directives","props","setup","_ref","slots","expansionPanel","Error","_useBackgroundColor","backgroundColorClasses","backgroundColorStyles","_useDimension","dimensionStyles","slotProps","disabled","value","expanded","isSelected","icon","_slots$default","_withDirectives","_createElementVNode","_normalizeClass","_normalizeStyle","style","undefined","toggle","call","_createVNode","default","_slots$actions","_slots$actions2","actions"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport vRipple from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: ExpansionPanelTitleSlot\n  actions: ExpansionPanelTitleSlot\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: false,\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VExpansionPanelTitle')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { vRipple },\n\n  props: makeVExpansionPanelTitleProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(() => props.color)\n    const { dimensionStyles } = useDimension(props)\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    const icon = toRef(() => expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon)\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n            'v-expansion-panel-title--focusable': props.focusable,\n            'v-expansion-panel-title--static': props.static,\n          },\n          backgroundColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          dimensionStyles.value,\n          props.style,\n        ]}\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <VDefaultsProvider\n            defaults={{\n              VIcon: {\n                icon: icon.value,\n              },\n            }}\n          >\n            <span class=\"v-expansion-panel-title__icon\">\n              { slots.actions?.(slotProps.value) ?? <VIcon /> }\n            </span>\n          </VDefaultsProvider>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}