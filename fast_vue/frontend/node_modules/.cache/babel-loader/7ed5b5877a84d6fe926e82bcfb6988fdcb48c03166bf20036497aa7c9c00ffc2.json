{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, onMounted } from 'vue';\nimport { fetchShots, fetchProjects } from './api';\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup: function setup() {\n    var projectName = ref('');\n    var projects = ref([]);\n    var shots = ref([]);\n\n    // DB 테스트 관련 변수 추가\n    var dbTestResult = ref(null);\n    dbTestError.ref(null);\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var projData;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _context.n = 1;\n            return fetchProjects();\n          case 1:\n            projData = _context.v;\n            projects.value = projData.projects || [];\n          case 2:\n            return _context.a(2);\n        }\n      }, _callee);\n    })));\n    function loadShots() {\n      return _loadShots.apply(this, arguments);\n    }\n    function _loadShots() {\n      _loadShots = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var data;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _context2.n = 1;\n              return fetchShots(projectName.value);\n            case 1:\n              data = _context2.v;\n              shots.value = data.shots || [];\n            case 2:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }));\n      return _loadShots.apply(this, arguments);\n    }\n    function clear() {\n      projectName.value = '';\n      shots.value = [];\n    }\n\n    // // DB 연결 테스트 메서드 추가\n    // async function testDbConnection() {\n    //   dbTestResult.value = null;\n    //   dbTestError.value = null;\n    //   try {\n    //     const response = await axios.get('http://localhost:8001/db-test');\n    //     dbTestResult.value = response.data.message;\n    //   } catch (error) {\n    //     console.error('DB 연결 테스트 중 에러 발생:', error);\n    //     dbTestError.value = error.message;\n    //     if (error.response && error.response.data && error.response.data.message) {\n    //       dbTestError.value = error.response.data.message;\n    //     }\n    //   }\n    // }\n\n    // return {\n    //   projectName,\n    //   projects,\n    //   shots,\n    //   loadShots,\n    //   clear,\n    //   dbTestResult, // 반환 객체에 추가\n    //   dbTestError,  // 반환 객체에 추가\n    //   testDbConnection // 반환 객체에 추가\n    // }\n  }\n};","map":{"version":3,"names":["ref","onMounted","fetchShots","fetchProjects","axios","setup","projectName","projects","shots","dbTestResult","dbTestError","_asyncToGenerator","_regenerator","m","_callee","projData","w","_context","n","v","value","a","loadShots","_loadShots","apply","arguments","_callee2","data","_context2","clear"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <div id=\"app\">\n        <div class=\"input-row\">\n          <v-autocomplete\n            v-model=\"projectName\"\n            label=\"Project\"\n            :items=\"projects\"\n            @keyup.enter=\"loadShots\"\n          ></v-autocomplete>\n          <v-btn @click=\"loadShots\">OK</v-btn>\n          <v-btn @click=\"clear\">Clear</v-btn>\n        </div>\n        <div class=\"table-container\">\n          <table v-if=\"shots.length\" class=\"shots-table\">\n            <thead>\n              <tr>\n                <th>Shot</th>\n                <th>Task</th>\n                <th>Cut In</th>\n                <th>Cut Out</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"shot in shots\" :key=\"shot.id\">\n                <td>{{ shot.code }}</td>\n                <td>{{ shot.sg_task }}</td>\n                <td>{{ shot.sg_cut_in }}</td>\n                <td>{{ shot.sg_cut_out }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <!-- DB 연결 테스트 섹션 추가\n        <v-divider class=\"my-5\"></v-divider>\n        <v-container>\n          <h2>DB 연결 테스트</h2>\n          <v-btn @click=\"testDbConnection\">DB 연결 테스트 실행</v-btn>\n          <p v-if=\"dbTestResult\">결과: {{ dbTestResult }}</p>\n          <p v-if=\"dbTestError\" style=\"color: red;\">에러: {{ dbTestError }}</p>\n        </v-container>\n        DB 연결 테스트 섹션 끝 -->\n\n      </div>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { fetchShots, fetchProjects } from './api'\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup() {\n    const projectName = ref('')\n    const projects = ref([])\n    const shots = ref([])\n\n    // DB 테스트 관련 변수 추가\n    const dbTestResult = ref(null);\n    dbTestError.ref(null);\n\n  onMounted(\n      async () => {\n        const projData = await fetchProjects()\n        projects.value = projData.projects || []\n    })\n\n    async function loadShots() {\n      const data = await fetchShots(projectName.value)\n      shots.value = data.shots || []\n    }\n\n    function clear() {\n      projectName.value = ''\n      shots.value = []\n    }\n\n    // // DB 연결 테스트 메서드 추가\n    // async function testDbConnection() {\n    //   dbTestResult.value = null;\n    //   dbTestError.value = null;\n    //   try {\n    //     const response = await axios.get('http://localhost:8001/db-test');\n    //     dbTestResult.value = response.data.message;\n    //   } catch (error) {\n    //     console.error('DB 연결 테스트 중 에러 발생:', error);\n    //     dbTestError.value = error.message;\n    //     if (error.response && error.response.data && error.response.data.message) {\n    //       dbTestError.value = error.response.data.message;\n    //     }\n    //   }\n    // }\n\n    // return {\n    //   projectName,\n    //   projects,\n    //   shots,\n    //   loadShots,\n    //   clear,\n    //   dbTestResult, // 반환 객체에 추가\n    //   dbTestError,  // 반환 객체에 추가\n    //   testDbConnection // 반환 객체에 추가\n    // }\n  }\n}\n</script>\n\n<style src=\"./assets/styles.css\"></style>"],"mappings":";;AAmDA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAI;AACnC,SAASC,UAAU,EAAEC,aAAY,QAAS,OAAM;AAChD,OAAOC,KAAI,MAAO,OAAO,EAAE;;AAE3B,eAAe;EACbC,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,WAAU,GAAIN,GAAG,CAAC,EAAE;IAC1B,IAAMO,QAAO,GAAIP,GAAG,CAAC,EAAE;IACvB,IAAMQ,KAAI,GAAIR,GAAG,CAAC,EAAE;;IAEpB;IACA,IAAMS,YAAW,GAAIT,GAAG,CAAC,IAAI,CAAC;IAC9BU,WAAW,CAACV,GAAG,CAAC,IAAI,CAAC;IAEvBC,SAAS,cAAAU,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CACL,SAAAC,QAAA;MAAA,IAAAC,QAAA;MAAA,OAAAH,YAAA,GAAAI,CAAA,WAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,CAAA;UAAA;YAAAD,QAAA,CAAAC,CAAA;YAAA,OACyBf,aAAa,CAAC;UAAA;YAA/BY,QAAO,GAAAE,QAAA,CAAAE,CAAA;YACbZ,QAAQ,CAACa,KAAI,GAAIL,QAAQ,CAACR,QAAO,IAAK,EAAC;UAAA;YAAA,OAAAU,QAAA,CAAAI,CAAA;QAAA;MAAA,GAAAP,OAAA;IAAA,CAC1C;IAAA,SAEcQ,SAASA,CAAA;MAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,WAAA;MAAAA,UAAA,GAAAZ,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAAxB,SAAAa,SAAA;QAAA,IAAAC,IAAA;QAAA,OAAAf,YAAA,GAAAI,CAAA,WAAAY,SAAA;UAAA,kBAAAA,SAAA,CAAAV,CAAA;YAAA;cAAAU,SAAA,CAAAV,CAAA;cAAA,OACqBhB,UAAU,CAACI,WAAW,CAACc,KAAK;YAAA;cAAzCO,IAAG,GAAAC,SAAA,CAAAT,CAAA;cACTX,KAAK,CAACY,KAAI,GAAIO,IAAI,CAACnB,KAAI,IAAK,EAAC;YAAA;cAAA,OAAAoB,SAAA,CAAAP,CAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CAC/B;MAAA,OAAAH,UAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAEA,SAASI,KAAKA,CAAA,EAAG;MACfvB,WAAW,CAACc,KAAI,GAAI,EAAC;MACrBZ,KAAK,CAACY,KAAI,GAAI,EAAC;IACjB;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}