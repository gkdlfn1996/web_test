{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\n// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser } from '../api'; // api.js에서 함수 임포트\n\n// Simple debounce utility function\nfunction debounce(func, delay) {\n  var timeoutId;\n  var debounced = function debounced() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var context = this;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(function () {\n      return func.apply(context, args);\n    }, delay);\n  };\n  debounced.cancel = function () {\n    clearTimeout(timeoutId);\n  };\n  return debounced;\n}\nexport default function useNotes(loggedInUserIdRef) {\n  // loggedInUserId를 ref로 받음\n  var notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n  var isSaving = ref({}); // 저장 상태를 버전 ID별로 관리하는 객체로 초기화\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  var loadVersionNotes = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(versionsToLoad) {\n      var notePromises, noteResults, newNotesContent, _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n            return _context.a(2);\n          case 1:\n            _context.p = 1;\n            // 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n            notePromises = versionsToLoad.map(function (version) {\n              return fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value);\n            });\n            _context.n = 2;\n            return Promise.all(notePromises);\n          case 2:\n            noteResults = _context.v;\n            // 가져온 노트 정보로 notesContent 객체를 만듭니다. 그 전에 notesContent를 초기화\n            newNotesContent = {};\n            noteResults.forEach(function (result, index) {\n              var versionId = versionsToLoad[index].id;\n              newNotesContent[versionId] = result.note ? result.note.content : '';\n            });\n            notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n            _context.n = 4;\n            break;\n          case 3:\n            _context.p = 3;\n            _t = _context.v;\n            console.error('노트 불러오기 실패:', _t);\n          case 4:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 3]]);\n    }));\n    return function loadVersionNotes(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 실제 백엔드에 노트를 저장하는 내부 함수\n  var _performSave = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(versionId, content) {\n      var startTime, elapsedTime, remainingTime, finishSaving, _t2;\n      return _regenerator().w(function (_context2) {\n        while (1) switch (_context2.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context2.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n            return _context2.a(2);\n          case 1:\n            // 반응형 객체를 직접 수정하여 특정 버전의 저장 상태를 true로 설정\n            isSaving.value[versionId] = true;\n            startTime = Date.now();\n            _context2.p = 2;\n            _context2.n = 3;\n            return axios.post('/api/notes', {\n              // 상대 경로로 변경\n              version_id: versionId,\n              owner_id: loggedInUserIdRef.value,\n              content: content\n            });\n          case 3:\n            console.log(\"Note for version \".concat(versionId, \" saved successfully.\"));\n            _context2.n = 5;\n            break;\n          case 4:\n            _context2.p = 4;\n            _t2 = _context2.v;\n            console.error(\"Note for version \".concat(versionId, \" save failed:\"), _t2);\n          case 5:\n            _context2.p = 5;\n            elapsedTime = Date.now() - startTime;\n            remainingTime = 500 - elapsedTime; // 최소 500ms 유지\n            finishSaving = function finishSaving() {\n              // 저장이 완료되면 해당 버전 ID의 키를 객체에서 삭제\n              delete isSaving.value[versionId];\n            };\n            if (remainingTime > 0) {\n              setTimeout(finishSaving, remainingTime);\n            } else {\n              finishSaving();\n            }\n            return _context2.f(5);\n          case 6:\n            return _context2.a(2);\n        }\n      }, _callee2, null, [[2, 4, 5, 6]]);\n    }));\n    return function _performSave(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // 디바운싱된 노트 저장 함수 (입력 중 사용)\n  var debouncedSave = debounce(_performSave, 1000); // 1초 디바운스\n\n  // 즉시 저장 함수 (블러 이벤트 등에서 사용)\n  var saveImmediately = _performSave;\n  return {\n    notesContent: notesContent,\n    loadVersionNotes: loadVersionNotes,\n    debouncedSave: debouncedSave,\n    // 외부에는 디바운싱된 함수를 노출\n    saveImmediately: saveImmediately,\n    // 즉시 저장 함수 노출\n    isSaving: isSaving // 저장 상태 노출\n  };\n}","map":{"version":3,"names":["ref","axios","fetchNoteForVersionAndUser","debounce","func","delay","timeoutId","debounced","_len","arguments","length","args","Array","_key","context","clearTimeout","setTimeout","apply","cancel","useNotes","loggedInUserIdRef","notesContent","isSaving","loadVersionNotes","_ref","_asyncToGenerator","_regenerator","m","_callee","versionsToLoad","notePromises","noteResults","newNotesContent","_t","w","_context","n","value","console","warn","a","p","map","version","id","Promise","all","v","forEach","result","index","versionId","note","content","error","_x","_performSave","_ref2","_callee2","startTime","elapsedTime","remainingTime","finishSaving","_t2","_context2","Date","now","post","version_id","owner_id","log","concat","f","_x2","_x3","debouncedSave","saveImmediately"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/composables/useNotes.js"],"sourcesContent":["// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser } from '../api'; // api.js에서 함수 임포트\n\n// Simple debounce utility function\nfunction debounce(func, delay) {\n  let timeoutId;\n  const debounced = function(...args) {\n    const context = this;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(context, args), delay);\n  };\n  debounced.cancel = () => {\n    clearTimeout(timeoutId);\n  };\n  return debounced;\n}\n\nexport default function useNotes(loggedInUserIdRef) { // loggedInUserId를 ref로 받음\n  const notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n  const isSaving = ref({}); // 저장 상태를 버전 ID별로 관리하는 객체로 초기화\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  const loadVersionNotes = async (versionsToLoad) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n      return;\n    }\n\n    try {\n      // 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n      const notePromises = versionsToLoad.map(version =>\n        fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value)\n      );\n      const noteResults = await Promise.all(notePromises);\n\n      // 가져온 노트 정보로 notesContent 객체를 만듭니다. 그 전에 notesContent를 초기화\n      const newNotesContent = {};\n      noteResults.forEach((result, index) => {\n        const versionId = versionsToLoad[index].id;\n        newNotesContent[versionId] = result.note ? result.note.content : '';\n      });\n      notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n    } catch (error) {\n      console.error('노트 불러오기 실패:', error);\n    }\n  };\n\n  // 실제 백엔드에 노트를 저장하는 내부 함수\n  const _performSave = async (versionId, content) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n      return;\n    }\n    // 반응형 객체를 직접 수정하여 특정 버전의 저장 상태를 true로 설정\n    isSaving.value[versionId] = true;\n    const startTime = Date.now();\n\n    try {\n      await axios.post('/api/notes', { // 상대 경로로 변경\n        version_id: versionId,\n        owner_id: loggedInUserIdRef.value,\n        content: content,\n      });\n      console.log(`Note for version ${versionId} saved successfully.`);\n    } catch (error) {\n      console.error(`Note for version ${versionId} save failed:`, error);\n    } finally {\n      const elapsedTime = Date.now() - startTime;\n      const remainingTime = 500 - elapsedTime; // 최소 500ms 유지\n\n      const finishSaving = () => {\n        // 저장이 완료되면 해당 버전 ID의 키를 객체에서 삭제\n        delete isSaving.value[versionId];\n      };\n\n      if (remainingTime > 0) {\n        setTimeout(finishSaving, remainingTime);\n      } else {\n        finishSaving();\n      }\n    }\n  };\n\n  // 디바운싱된 노트 저장 함수 (입력 중 사용)\n  const debouncedSave = debounce(_performSave, 1000); // 1초 디바운스\n\n  // 즉시 저장 함수 (블러 이벤트 등에서 사용)\n  const saveImmediately = _performSave;\n\n  return {\n    notesContent,\n    loadVersionNotes,\n    debouncedSave, // 외부에는 디바운싱된 함수를 노출\n    saveImmediately, // 즉시 저장 함수 노출\n    isSaving, // 저장 상태 노출\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}