{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n// frontend/src/composables/useWebSocket.js\nimport { ref, onUnmounted } from 'vue';\nexport default function useWebSocket() {\n  var ws = ref(null);\n  var receivedMessage = ref(null);\n  var isConnected = ref(false);\n  var connectWebSocket = function connectWebSocket(versionId, userId) {\n    if (ws.value && isConnected.value) {\n      console.warn('WebSocket is already connected.');\n      return;\n    }\n\n    // WebSocket URL은 백엔드 API URL과 동일한 호스트를 사용하고, 포트는 웹소켓 포트(예: 8001)를 사용합니다.\n    // 프로토콜은 ws:// 또는 wss:// (HTTPS의 경우)를 사용합니다.\n    var protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    var host = process.env.VUE_APP_API_BASE_URL.replace(/^(http|https):/, protocol);\n    var websocketUrl = \"\".concat(host, \"/ws/\").concat(versionId);\n    console.log(\"Attempting to connect WebSocket to: \".concat(websocketUrl));\n    ws.value = new WebSocket(websocketUrl);\n    ws.value.onopen = function () {\n      isConnected.value = true;\n      console.log('WebSocket connected successfully.');\n      // 연결 시 사용자 ID를 서버에 전송 (선택 사항, 서버에서 필요하다면)\n      // ws.value.send(JSON.stringify({ type: 'user_id', userId: userId }));\n    };\n    ws.value.onmessage = function (event) {\n      console.log('WebSocket message received:', event.data);\n      receivedMessage.value = JSON.parse(event.data);\n    };\n    ws.value.onclose = function (event) {\n      isConnected.value = false;\n      console.log('WebSocket disconnected:', event.code, event.reason);\n      // 연결이 끊겼을 때 재연결 로직을 추가할 수 있습니다.\n    };\n    ws.value.onerror = function (error) {\n      console.error('WebSocket error:', error);\n      isConnected.value = false;\n    };\n  };\n  var sendMessage = function sendMessage(message) {\n    if (ws.value && isConnected.value) {\n      ws.value.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Cannot send message.');\n    }\n  };\n  var disconnectWebSocket = function disconnectWebSocket() {\n    if (ws.value && isConnected.value) {\n      ws.value.close();\n      ws.value = null;\n      isConnected.value = false;\n      console.log('WebSocket explicitly disconnected.');\n    }\n  };\n\n  // 컴포넌트 언마운트 시 웹소켓 연결 해제\n  onUnmounted(function () {\n    disconnectWebSocket();\n  });\n  return {\n    ws: ws,\n    receivedMessage: receivedMessage,\n    isConnected: isConnected,\n    connectWebSocket: connectWebSocket,\n    sendMessage: sendMessage,\n    disconnectWebSocket: disconnectWebSocket\n  };\n}","map":{"version":3,"names":["ref","onUnmounted","useWebSocket","ws","receivedMessage","isConnected","connectWebSocket","versionId","userId","value","console","warn","protocol","window","location","host","process","env","VUE_APP_API_BASE_URL","replace","websocketUrl","concat","log","WebSocket","onopen","onmessage","event","data","JSON","parse","onclose","code","reason","onerror","error","sendMessage","message","send","stringify","disconnectWebSocket","close"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/composables/useWebSocket.js"],"sourcesContent":["// frontend/src/composables/useWebSocket.js\nimport { ref, onUnmounted } from 'vue';\n\nexport default function useWebSocket() {\n  const ws = ref(null);\n  const receivedMessage = ref(null);\n  const isConnected = ref(false);\n\n  const connectWebSocket = (versionId, userId) => {\n    if (ws.value && isConnected.value) {\n      console.warn('WebSocket is already connected.');\n      return;\n    }\n\n    // WebSocket URL은 백엔드 API URL과 동일한 호스트를 사용하고, 포트는 웹소켓 포트(예: 8001)를 사용합니다.\n    // 프로토콜은 ws:// 또는 wss:// (HTTPS의 경우)를 사용합니다.\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = process.env.VUE_APP_API_BASE_URL.replace(/^(http|https):/, protocol);\n    const websocketUrl = `${host}/ws/${versionId}`;\n\n    console.log(`Attempting to connect WebSocket to: ${websocketUrl}`);\n    ws.value = new WebSocket(websocketUrl);\n\n    ws.value.onopen = () => {\n      isConnected.value = true;\n      console.log('WebSocket connected successfully.');\n      // 연결 시 사용자 ID를 서버에 전송 (선택 사항, 서버에서 필요하다면)\n      // ws.value.send(JSON.stringify({ type: 'user_id', userId: userId }));\n    };\n\n    ws.value.onmessage = (event) => {\n      console.log('WebSocket message received:', event.data);\n      receivedMessage.value = JSON.parse(event.data);\n    };\n\n    ws.value.onclose = (event) => {\n      isConnected.value = false;\n      console.log('WebSocket disconnected:', event.code, event.reason);\n      // 연결이 끊겼을 때 재연결 로직을 추가할 수 있습니다.\n    };\n\n    ws.value.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      isConnected.value = false;\n    };\n  };\n\n  const sendMessage = (message) => {\n    if (ws.value && isConnected.value) {\n      ws.value.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Cannot send message.');\n    }\n  };\n\n  const disconnectWebSocket = () => {\n    if (ws.value && isConnected.value) {\n      ws.value.close();\n      ws.value = null;\n      isConnected.value = false;\n      console.log('WebSocket explicitly disconnected.');\n    }\n  };\n\n  // 컴포넌트 언마운트 시 웹소켓 연결 해제\n  onUnmounted(() => {\n    disconnectWebSocket();\n  });\n\n  return {\n    ws,\n    receivedMessage,\n    isConnected,\n    connectWebSocket,\n    sendMessage,\n    disconnectWebSocket,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}