{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser } from '../api'; // api.js에서 함수 임포트\n\nexport default function useNotes(loggedInUserIdRef) {\n  // loggedInUserId를 ref로 받음\n  var notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  var loadVersionNotes = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(versionsToLoad) {\n      var notePromises, noteResults, newNotesContent, _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n            return _context.a(2);\n          case 1:\n            _context.p = 1;\n            // 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n            notePromises = versionsToLoad.map(function (version) {\n              return fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value);\n            });\n            _context.n = 2;\n            return Promise.all(notePromises);\n          case 2:\n            noteResults = _context.v;\n            // 가져온 노트 정보로 notesContent 객체를 만듭니다. 그 전에 notesContent를 초기화\n            newNotesContent = {};\n            noteResults.forEach(function (result, index) {\n              var versionId = versionsToLoad[index].id;\n              newNotesContent[versionId] = result.note ? result.note.content : '';\n            });\n            notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n            _context.n = 4;\n            break;\n          case 3:\n            _context.p = 3;\n            _t = _context.v;\n            console.error('노트 불러오기 실패:', _t);\n          case 4:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 3]]);\n    }));\n    return function loadVersionNotes(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // 노트 저장 메서드\n  var saveNote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(versionId, content) {\n      var _t2;\n      return _regenerator().w(function (_context2) {\n        while (1) switch (_context2.n) {\n          case 0:\n            if (loggedInUserIdRef.value) {\n              _context2.n = 1;\n              break;\n            }\n            console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n            return _context2.a(2);\n          case 1:\n            _context2.p = 1;\n            _context2.n = 2;\n            return axios.post('http://localhost:8001/api/notes', {\n              version_id: versionId,\n              owner_id: loggedInUserIdRef.value,\n              content: content\n            });\n          case 2:\n            console.log(\"Note for version \".concat(versionId, \" saved successfully.\"));\n            return _context2.a(2, content);\n          case 3:\n            _context2.p = 3;\n            _t2 = _context2.v;\n            console.error(\"Note for version \".concat(versionId, \" save failed:\"), _t2);\n            return _context2.a(2, null);\n        }\n      }, _callee2, null, [[1, 3]]);\n    }));\n    return function saveNote(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return {\n    notesContent: notesContent,\n    loadVersionNotes: loadVersionNotes,\n    saveNote: saveNote\n  };\n}","map":{"version":3,"names":["ref","axios","fetchNoteForVersionAndUser","useNotes","loggedInUserIdRef","notesContent","loadVersionNotes","_ref","_asyncToGenerator","_regenerator","m","_callee","versionsToLoad","notePromises","noteResults","newNotesContent","_t","w","_context","n","value","console","warn","a","p","map","version","id","Promise","all","v","forEach","result","index","versionId","note","content","error","_x","apply","arguments","saveNote","_ref2","_callee2","_t2","_context2","post","version_id","owner_id","log","concat","_x2","_x3"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/composables/useNotes.js"],"sourcesContent":["// frontend/src/composables/useNotes.js\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { fetchNoteForVersionAndUser } from '../api'; // api.js에서 함수 임포트\n\nexport default function useNotes(loggedInUserIdRef) { // loggedInUserId를 ref로 받음\n  const notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n\n  // 모든 버전에 대한 노트 내용을 불러오는 함수\n  const loadVersionNotes = async (versionsToLoad) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 불러올 수 없습니다.');\n      return;\n    }\n\n    try {\n      // 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n      const notePromises = versionsToLoad.map(version =>\n        fetchNoteForVersionAndUser(version.id, loggedInUserIdRef.value)\n      );\n      const noteResults = await Promise.all(notePromises);\n\n      // 가져온 노트 정보로 notesContent 객체를 만듭니다. 그 전에 notesContent를 초기화\n      const newNotesContent = {};\n      noteResults.forEach((result, index) => {\n        const versionId = versionsToLoad[index].id;\n        newNotesContent[versionId] = result.note ? result.note.content : '';\n      });\n      notesContent.value = newNotesContent; // 반응성을 위해 객체 자체를 교체\n    } catch (error) {\n      console.error('노트 불러오기 실패:', error);\n    }\n  };\n\n  // 노트 저장 메서드\n  const saveNote = async (versionId, content) => {\n    if (!loggedInUserIdRef.value) {\n      console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n      return;\n    }\n    try {\n      await axios.post('http://localhost:8001/api/notes', {\n        version_id: versionId,\n        owner_id: loggedInUserIdRef.value,\n        content: content,\n      });\n      console.log(`Note for version ${versionId} saved successfully.`);\n      return content; // 저장 성공 후 업데이트된 내용 반환\n    } catch (error) {\n      console.error(`Note for version ${versionId} save failed:`, error);\n      return null; // 실패 시 null 반환\n    }\n  };\n\n  return {\n    notesContent,\n    loadVersionNotes,\n    saveNote,\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}