{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ref, onMounted } from 'vue';\nimport { fetchShots, fetchProjects, fetchVersionsForShot, fetchNoteForVersionAndUser } from './api';\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup: function setup() {\n    var projectName = ref('');\n    var projects = ref([]);\n    var shots = ref([]); // 선택된 프로젝트의 샷 목록 (autocomplete items)\n    var versions = ref([]); // 버전 목록을 저장할 ref 추가\n    var username = ref(''); // 로그인 사용자 이름\n    var password = ref(''); // 로그인 비밀번호\n    var loggedInUser = ref(null); // 로그인 성공 시 사용자 이름 저장\n    var loggedInUserId = ref(null); // 로그인 성공 시 사용자 ID 저장\n    var notesContent = ref({}); // 각 버전별 노트 내용을 저장할 객체\n    var loginError = ref(null); // 로그인 에러 메시지\n    var selectedShotName = ref(''); // 선택된 샷 이름\n\n    // DB 테스트 관련 변수 추가\n    var dbTestResult = ref(null);\n    var dbTestError = ref(null);\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var storedUser, user, projData;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            // 페이지 로드 시 localStorage에서 로그인 정보 복원\n            storedUser = sessionStorage.getItem('loggedInUser');\n            if (storedUser) {\n              user = JSON.parse(storedUser);\n              loggedInUser.value = user.name;\n              loggedInUserId.value = user.id;\n            }\n\n            // 프로젝트 목록 불러오기\n            _context.n = 1;\n            return fetchProjects();\n          case 1:\n            projData = _context.v;\n            projects.value = projData.projects || [];\n          case 2:\n            return _context.a(2);\n        }\n      }, _callee);\n    })));\n\n    // 프로젝트 선택 시 해당 프로젝트의 샷 목록을 불러오는 함수\n    function onProjectSelected() {\n      return _onProjectSelected.apply(this, arguments);\n    } // 선택된 샷의 버전 목록을 불러오는 함수\n    function _onProjectSelected() {\n      _onProjectSelected = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var data;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              selectedShotName.value = ''; // 프로젝트 변경 시 샷 선택 초기화\n              versions.value = []; // 프로젝트 변경 시 버전 목록 초기화\n              if (!projectName.value) {\n                _context2.n = 2;\n                break;\n              }\n              _context2.n = 1;\n              return fetchShots(projectName.value);\n            case 1:\n              data = _context2.v;\n              shots.value = data.shots || [];\n              _context2.n = 3;\n              break;\n            case 2:\n              shots.value = [];\n            case 3:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }));\n      return _onProjectSelected.apply(this, arguments);\n    }\n    function loadVersions() {\n      return _loadVersions.apply(this, arguments);\n    }\n    function _loadVersions() {\n      _loadVersions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var selectedShot, versionData, loadedVersions, notePromises, noteResults, newNotesContent, _t;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              _context3.p = 0;\n              selectedShot = shots.value.find(function (s) {\n                return s.code === selectedShotName.value;\n              });\n              if (selectedShot) {\n                _context3.n = 1;\n                break;\n              }\n              return _context3.a(2);\n            case 1:\n              _context3.n = 2;\n              return fetchVersionsForShot(selectedShot.id);\n            case 2:\n              versionData = _context3.v;\n              loadedVersions = versionData.versions || []; // 1. 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n              notePromises = loadedVersions.map(function (version) {\n                return fetchNoteForVersionAndUser(version.id, loggedInUserId.value);\n              });\n              _context3.n = 3;\n              return Promise.all(notePromises);\n            case 3:\n              noteResults = _context3.v;\n              // 2. 가져온 노트 정보로 notesContent 객체를 만듭니다.\n              newNotesContent = {};\n              noteResults.forEach(function (result, index) {\n                var versionId = loadedVersions[index].id;\n                newNotesContent[versionId] = result.note ? result.note.content : '';\n              });\n\n              // 3. 모든 데이터가 준비되면 한 번에 상태를 업데이트하여 렌더링을 유발합니다.\n              notesContent.value = newNotesContent;\n              versions.value = loadedVersions;\n              _context3.n = 5;\n              break;\n            case 4:\n              _context3.p = 4;\n              _t = _context3.v;\n              console.error(\"Error loading versions and notes:\", _t);\n              // 사용자에게 에러를 알리는 로직을 추가할 수 있습니다.\n            case 5:\n              return _context3.a(2);\n          }\n        }, _callee3, null, [[0, 4]]);\n      }));\n      return _loadVersions.apply(this, arguments);\n    }\n    function clear() {\n      projectName.value = '';\n      shots.value = [];\n      versions.value = []; // 버전 목록도 초기화\n      selectedShotName.value = ''; // 선택된 샷 이름도 초기화\n      loginError.value = null;\n    }\n\n    // 로그인 메서드 추가\n    function login() {\n      return _login.apply(this, arguments);\n    } // 각 버전에 대한 기존 노트 내용을 불러오는 함수\n    function _login() {\n      _login = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var response, _t2;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              loginError.value = null; // 에러 메시지 초기화\n              _context4.p = 1;\n              _context4.n = 2;\n              return axios.post('http://localhost:8001/api/auth/login', {\n                username: username.value,\n                password: password.value\n              });\n            case 2:\n              response = _context4.v;\n              if (response.data.user) {\n                loggedInUser.value = response.data.user.name; // 사용자 이름 저장\n                loggedInUserId.value = response.data.user.id; // 사용자 ID 저장\n                // 로그인 성공 시 사용자 정보를 localStorage에 저장\n                sessionStorage.setItem('loggedInUser', JSON.stringify(response.data.user));\n              }\n              _context4.n = 4;\n              break;\n            case 3:\n              _context4.p = 3;\n              _t2 = _context4.v;\n              console.error('로그인 실패:', _t2);\n              loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n              loggedInUser.value = null;\n              loggedInUserId.value = null;\n            case 4:\n              return _context4.a(2);\n          }\n        }, _callee4, null, [[1, 3]]);\n      }));\n      return _login.apply(this, arguments);\n    }\n    function loadExistingNotesForVersions() {\n      return _loadExistingNotesForVersions.apply(this, arguments);\n    } // 노트 저장 메서드 추가\n    function _loadExistingNotesForVersions() {\n      _loadExistingNotesForVersions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n        var _iterator, _step, version, noteData, _t3;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(versions.value);\n              _context5.p = 1;\n              _iterator.s();\n            case 2:\n              if ((_step = _iterator.n()).done) {\n                _context5.n = 5;\n                break;\n              }\n              version = _step.value;\n              _context5.n = 3;\n              return fetchNoteForVersionAndUser(version.id, loggedInUserId.value);\n            case 3:\n              noteData = _context5.v;\n              if (noteData.note) {\n                notesContent.value[version.id] = noteData.note.content;\n              } else {\n                notesContent.value[version.id] = ''; // 노트가 없으면 빈 문자열로 초기화\n              }\n            case 4:\n              _context5.n = 2;\n              break;\n            case 5:\n              _context5.n = 7;\n              break;\n            case 6:\n              _context5.p = 6;\n              _t3 = _context5.v;\n              _iterator.e(_t3);\n            case 7:\n              _context5.p = 7;\n              _iterator.f();\n              return _context5.f(7);\n            case 8:\n              return _context5.a(2);\n          }\n        }, _callee5, null, [[1, 6, 7, 8]]);\n      }));\n      return _loadExistingNotesForVersions.apply(this, arguments);\n    }\n    function saveNote(_x, _x2) {\n      return _saveNote.apply(this, arguments);\n    } // DB 연결 테스트 메서드 추가\n    function _saveNote() {\n      _saveNote = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(versionId, content) {\n        var _t4;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              if (loggedInUserId.value) {\n                _context6.n = 1;\n                break;\n              }\n              console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n              return _context6.a(2);\n            case 1:\n              _context6.p = 1;\n              _context6.n = 2;\n              return axios.post('http://localhost:8001/api/notes', {\n                version_id: versionId,\n                owner_id: loggedInUserId.value,\n                content: content\n              });\n            case 2:\n              console.log(\"Note for version \".concat(versionId, \" saved successfully.\"));\n              _context6.n = 4;\n              break;\n            case 3:\n              _context6.p = 3;\n              _t4 = _context6.v;\n              console.error(\"Note for version \".concat(versionId, \" save failed:\"), _t4);\n            case 4:\n              return _context6.a(2);\n          }\n        }, _callee6, null, [[1, 3]]);\n      }));\n      return _saveNote.apply(this, arguments);\n    }\n    function testDbConnection() {\n      return _testDbConnection.apply(this, arguments);\n    } // v-data-table을 위한 헤더 정의\n    function _testDbConnection() {\n      _testDbConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {\n        var response, _t5;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              dbTestResult.value = null;\n              dbTestError.value = null;\n              _context7.p = 1;\n              _context7.n = 2;\n              return axios.get('http://localhost:8001/db-test');\n            case 2:\n              response = _context7.v;\n              dbTestResult.value = response.data.message;\n              _context7.n = 4;\n              break;\n            case 3:\n              _context7.p = 3;\n              _t5 = _context7.v;\n              console.error('DB 연결 테스트 중 에러 발생:', _t5);\n              dbTestError.value = _t5.message;\n              if (_t5.response && _t5.response.data && _t5.response.data.message) {\n                dbTestError.value = _t5.response.data.message;\n              }\n            case 4:\n              return _context7.a(2);\n          }\n        }, _callee7, null, [[1, 3]]);\n      }));\n      return _testDbConnection.apply(this, arguments);\n    }\n    var versionHeaders = [{\n      title: 'Version',\n      key: 'code',\n      sortable: false\n    }, {\n      title: 'Note',\n      key: 'note',\n      sortable: false\n    }];\n    return {\n      projectName: projectName,\n      projects: projects,\n      shots: shots,\n      selectedShotName: selectedShotName,\n      username: username,\n      password: password,\n      loggedInUser: loggedInUser,\n      loggedInUserId: loggedInUserId,\n      loginError: loginError,\n      versions: versions,\n      onProjectSelected: onProjectSelected,\n      loadVersions: loadVersions,\n      clear: clear,\n      versionHeaders: versionHeaders,\n      dbTestResult: dbTestResult,\n      dbTestError: dbTestError,\n      testDbConnection: testDbConnection,\n      login: login,\n      saveNote: saveNote\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","fetchShots","fetchProjects","fetchVersionsForShot","fetchNoteForVersionAndUser","axios","setup","projectName","projects","shots","versions","username","password","loggedInUser","loggedInUserId","notesContent","loginError","selectedShotName","dbTestResult","dbTestError","_asyncToGenerator","_regenerator","m","_callee","storedUser","user","projData","w","_context","n","sessionStorage","getItem","JSON","parse","value","name","id","v","a","onProjectSelected","_onProjectSelected","apply","arguments","_callee2","data","_context2","loadVersions","_loadVersions","_callee3","selectedShot","versionData","loadedVersions","notePromises","noteResults","newNotesContent","_t","_context3","p","find","s","code","map","version","Promise","all","forEach","result","index","versionId","note","content","console","error","clear","login","_login","_callee4","response","_t2","_context4","post","setItem","stringify","loadExistingNotesForVersions","_loadExistingNotesForVersions","_callee5","_iterator","_step","noteData","_t3","_context5","_createForOfIteratorHelper","done","e","f","saveNote","_x","_x2","_saveNote","_callee6","_t4","_context6","warn","version_id","owner_id","log","concat","testDbConnection","_testDbConnection","_callee7","_t5","_context7","get","message","versionHeaders","title","key","sortable"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <!-- 로그인 섹션 -->\n      <v-container class=\"login-section\">\n        <v-card class=\"pa-5\" elevation=\"2\" v-if=\"!loggedInUser\">\n          <v-card-title class=\"text-h5\">로그인</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"username\"\n              label=\"ShotGrid ID\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              @keyup.enter=\"login\"\n              required\n            ></v-text-field>\n            <v-alert\n              v-if=\"loginError\"\n              type=\"error\"\n              dense\n              text\n              class=\"mb-3\"\n            >{{ loginError }}</v-alert>\n            <v-btn color=\"primary\" @click=\"login\">로그인</v-btn>\n          </v-card-text>\n        </v-card>\n        <v-alert v-else type=\"success\" dense text class=\"mb-5\">\n          <span>환영합니다, {{ loggedInUser }}!</span>\n        </v-alert>\n      </v-container>\n\n      <!-- 기존 UI 섹션 (로그인 성공 시 표시) -->\n      <v-container fluid v-if=\"loggedInUser\" :class=\"{'mt-5': loggedInUser}\">\n        <div class=\"d-flex align-center mb-4\">\n          <v-autocomplete\n            v-model=\"projectName\"\n            label=\"Project\"\n            :items=\"projects\"\n            @update:modelValue=\"onProjectSelected\"\n            class=\"mr-4\"\n          ></v-autocomplete>\n          <v-autocomplete\n            v-model=\"selectedShotName\"\n            label=\"Shot\"\n            :items=\"shots.map(s => s.code)\"\n            :disabled=\"!shots.length\"\n            class=\"mr-4\"\n          ></v-autocomplete>\n          <v-btn @click=\"loadVersions\" :disabled=\"!selectedShotName\">OK</v-btn>\n          <v-btn @click=\"clear\" class=\"ml-4\">Clear</v-btn>\n        </div>\n\n        <!-- 버전 목록 테이블 -->\n        <div class=\"versions-section\" v-if=\"versions.length\">\n          <h2>Version</h2>\n          <v-data-table\n            :headers=\"versionHeaders\"\n            :items=\"versions\"\n            item-key=\"id\"\n            class=\"elevation-1\"\n            hide-default-footer\n            disable-pagination\n          >\n            <template v-slot:item.note=\"{ item }\">\n              <div class=\"note-section\">\n                <div class=\"my-note\">\n                  <h3>My Draft Note ({{ item.code }})</h3>\n                  <v-textarea\n                    label=\"여기에 노트를 작성하세요\"\n                    rows=\"3\"\n                    v-model=\"notesContent[item.id]\"\n                    @input=\"saveNote(item.id, notesContent[item.id])\"\n                    variant=\"outlined\"\n                  ></v-textarea>\n                </div>\n                <div class=\"other-notes\">\n                  <h3>Others Draft Notes</h3>\n                  <p>다른 사람의 노트 내용이 여기에 실시간으로 표시됩니다.</p>\n                </div>\n              </div>\n            </template>\n          </v-data-table>\n        </div>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { fetchShots, fetchProjects, fetchVersionsForShot, fetchNoteForVersionAndUser } from './api';\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup() {\n    const projectName = ref('')\n    const projects = ref([])\n    const shots = ref([]) // 선택된 프로젝트의 샷 목록 (autocomplete items)\n    const versions = ref([]) // 버전 목록을 저장할 ref 추가\n    const username = ref('') // 로그인 사용자 이름\n    const password = ref('') // 로그인 비밀번호\n    const loggedInUser = ref(null) // 로그인 성공 시 사용자 이름 저장\n    const loggedInUserId = ref(null) // 로그인 성공 시 사용자 ID 저장\n    const notesContent = ref({}) // 각 버전별 노트 내용을 저장할 객체\n    const loginError = ref(null) // 로그인 에러 메시지\n    const selectedShotName = ref('') // 선택된 샷 이름\n\n    // DB 테스트 관련 변수 추가\n    const dbTestResult = ref(null);\n    const dbTestError = ref(null);\n\n    onMounted(async () => {\n      // 페이지 로드 시 localStorage에서 로그인 정보 복원\n      const storedUser = sessionStorage.getItem('loggedInUser');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        loggedInUser.value = user.name;\n        loggedInUserId.value = user.id;\n      }\n\n      // 프로젝트 목록 불러오기\n      const projData = await fetchProjects();\n      projects.value = projData.projects || [];\n    });\n\n    // 프로젝트 선택 시 해당 프로젝트의 샷 목록을 불러오는 함수\n    async function onProjectSelected() {\n      selectedShotName.value = ''; // 프로젝트 변경 시 샷 선택 초기화\n      versions.value = []; // 프로젝트 변경 시 버전 목록 초기화\n      if (projectName.value) {\n        const data = await fetchShots(projectName.value);\n        shots.value = data.shots || [];\n      } else {\n        shots.value = [];\n      }\n    }\n\n    // 선택된 샷의 버전 목록을 불러오는 함수\n    async function loadVersions() {\n      try {\n        const selectedShot = shots.value.find(s => s.code === selectedShotName.value);\n        if (!selectedShot) return;\n\n        const versionData = await fetchVersionsForShot(selectedShot.id);\n        const loadedVersions = versionData.versions || [];\n\n        // 1. 모든 버전에 대한 노트 정보를 병렬로 가져옵니다.\n        const notePromises = loadedVersions.map(version =>\n          fetchNoteForVersionAndUser(version.id, loggedInUserId.value)\n        );\n        const noteResults = await Promise.all(notePromises);\n\n        // 2. 가져온 노트 정보로 notesContent 객체를 만듭니다.\n        const newNotesContent = {};\n        noteResults.forEach((result, index) => {\n          const versionId = loadedVersions[index].id;\n          newNotesContent[versionId] = result.note ? result.note.content : '';\n        });\n\n        // 3. 모든 데이터가 준비되면 한 번에 상태를 업데이트하여 렌더링을 유발합니다.\n        notesContent.value = newNotesContent;\n        versions.value = loadedVersions;\n\n      } catch (error) {\n        console.error(\"Error loading versions and notes:\", error);\n        // 사용자에게 에러를 알리는 로직을 추가할 수 있습니다.\n      }\n    }\n\n    function clear() {\n      projectName.value = ''\n      shots.value = []\n      versions.value = [] // 버전 목록도 초기화\n      selectedShotName.value = '' // 선택된 샷 이름도 초기화\n      loginError.value = null;\n    }\n\n    // 로그인 메서드 추가\n    async function login() {\n      loginError.value = null; // 에러 메시지 초기화\n      try {\n        const response = await axios.post('http://localhost:8001/api/auth/login', {\n          username: username.value,\n          password: password.value,\n        });\n        if (response.data.user) {\n          loggedInUser.value = response.data.user.name; // 사용자 이름 저장\n          loggedInUserId.value = response.data.user.id; // 사용자 ID 저장\n          // 로그인 성공 시 사용자 정보를 localStorage에 저장\n          sessionStorage.setItem('loggedInUser', JSON.stringify(response.data.user));\n        }\n      } catch (error) {\n        console.error('로그인 실패:', error);\n        loginError.value = '아이디 또는 비밀번호를 다시 확인해주세요.';\n        loggedInUser.value = null;\n        loggedInUserId.value = null;\n      }\n    }\n\n    // 각 버전에 대한 기존 노트 내용을 불러오는 함수\n    async function loadExistingNotesForVersions() {\n      for (const version of versions.value) {\n        const noteData = await fetchNoteForVersionAndUser(version.id, loggedInUserId.value);\n        if (noteData.note) {\n          notesContent.value[version.id] = noteData.note.content;\n        } else {\n          notesContent.value[version.id] = ''; // 노트가 없으면 빈 문자열로 초기화\n        }\n      }\n    }\n\n    // 노트 저장 메서드 추가\n    async function saveNote(versionId, content) {\n      if (!loggedInUserId.value) {\n        console.warn('로그인되지 않은 사용자입니다. 노트를 저장할 수 없습니다.');\n        return;\n      }\n      try {\n        await axios.post('http://localhost:8001/api/notes', {\n          version_id: versionId,\n          owner_id: loggedInUserId.value,\n          content: content,\n        });\n        console.log(`Note for version ${versionId} saved successfully.`);\n      } catch (error) {\n        console.error(`Note for version ${versionId} save failed:`, error);\n      }\n    }\n\n    // DB 연결 테스트 메서드 추가\n    async function testDbConnection() {\n      dbTestResult.value = null;\n      dbTestError.value = null;\n      try {\n        const response = await axios.get('http://localhost:8001/db-test');\n        dbTestResult.value = response.data.message;\n      } catch (error) {\n        console.error('DB 연결 테스트 중 에러 발생:', error);\n        dbTestError.value = error.message;\n        if (error.response && error.response.data && error.response.data.message) {\n          dbTestError.value = error.response.data.message;\n        }\n      }\n    }\n\n    // v-data-table을 위한 헤더 정의\n    const versionHeaders = [\n      { title: 'Version', key: 'code', sortable: false },\n      { title: 'Note', key: 'note', sortable: false },\n    ];\n\n    return {\n      projectName,\n      projects,\n      shots,\n      selectedShotName,\n      username,\n      password,\n      loggedInUser,\n      loggedInUserId,\n      loginError,\n      versions,\n      onProjectSelected,\n      loadVersions,\n      clear,\n      versionHeaders,\n      dbTestResult,\n      dbTestError, \n      testDbConnection,\n      login,\n      saveNote\n    }\n  }\n}\n    \n</script>\n\n<style src=\"./assets/styles.css\"></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}