{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, onMounted } from 'vue';\nimport { fetchShots, fetchProjects } from './api';\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup: function setup() {\n    var projectName = ref('');\n    var projects = ref([]);\n    var shots = ref([]);\n\n    // DB 테스트 관련 변수 추가\n    var dbTestResult = ref(null);\n    dbTestError.ref(null);\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var projData;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _context.n = 1;\n            return fetchProjects();\n          case 1:\n            projData = _context.v;\n            projects.value = projData.projects || [];\n          case 2:\n            return _context.a(2);\n        }\n      }, _callee);\n    })));\n    function loadShots() {\n      return _loadShots.apply(this, arguments);\n    }\n    function _loadShots() {\n      _loadShots = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var data;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _context2.n = 1;\n              return fetchShots(projectName.value);\n            case 1:\n              data = _context2.v;\n              shots.value = data.shots || [];\n            case 2:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }));\n      return _loadShots.apply(this, arguments);\n    }\n    function clear() {\n      projectName.value = '';\n      shots.value = [];\n    }\n\n    // DB 연결 테스트 메서드 추가\n    function testDbConnection() {\n      return _testDbConnection.apply(this, arguments);\n    }\n    function _testDbConnection() {\n      _testDbConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var response, _t;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              dbTestResult.value = null;\n              dbTestError.value = null;\n              _context3.p = 1;\n              _context3.n = 2;\n              return axios.get('http://localhost:8001/db-test');\n            case 2:\n              response = _context3.v;\n              dbTestResult.value = response.data.message;\n              _context3.n = 4;\n              break;\n            case 3:\n              _context3.p = 3;\n              _t = _context3.v;\n              console.error('DB 연결 테스트 중 에러 발생:', _t);\n              dbTestError.value = _t.message;\n              if (_t.response && _t.response.data && _t.response.data.message) {\n                dbTestError.value = _t.response.data.message;\n              }\n            case 4:\n              return _context3.a(2);\n          }\n        }, _callee3, null, [[1, 3]]);\n      }));\n      return _testDbConnection.apply(this, arguments);\n    }\n    return {\n      projectName: projectName,\n      projects: projects,\n      shots: shots,\n      loadShots: loadShots,\n      clear: clear,\n      dbTestResult: dbTestResult,\n      // 반환 객체에 추가\n      dbTestError: dbTestError,\n      // 반환 객체에 추가\n      testDbConnection: testDbConnection // 반환 객체에 추가\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","fetchShots","fetchProjects","axios","setup","projectName","projects","shots","dbTestResult","dbTestError","_asyncToGenerator","_regenerator","m","_callee","projData","w","_context","n","v","value","a","loadShots","_loadShots","apply","arguments","_callee2","data","_context2","clear","testDbConnection","_testDbConnection","_callee3","response","_t","_context3","p","get","message","console","error"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <div id=\"app\">\n        <div class=\"input-row\">\n          <v-autocomplete\n            v-model=\"projectName\"\n            label=\"Project\"\n            :items=\"projects\"\n            @keyup.enter=\"loadShots\"\n          ></v-autocomplete>\n          <v-btn @click=\"loadShots\">OK</v-btn>\n          <v-btn @click=\"clear\">Clear</v-btn>\n        </div>\n        <div class=\"table-container\">\n          <table v-if=\"shots.length\" class=\"shots-table\">\n            <thead>\n              <tr>\n                <th>Shot</th>\n                <th>Task</th>\n                <th>Cut In</th>\n                <th>Cut Out</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"shot in shots\" :key=\"shot.id\">\n                <td>{{ shot.code }}</td>\n                <td>{{ shot.sg_task }}</td>\n                <td>{{ shot.sg_cut_in }}</td>\n                <td>{{ shot.sg_cut_out }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <!-- DB 연결 테스트 섹션 추가 -->\n        <v-divider class=\"my-5\"></v-divider>\n        <v-container>\n          <h2>DB 연결 테스트</h2>\n          <v-btn @click=\"testDbConnection\">DB 연결 테스트 실행</v-btn>\n          <p v-if=\"dbTestResult\">결과: {{ dbTestResult }}</p>\n          <p v-if=\"dbTestError\" style=\"color: red;\">에러: {{ dbTestError }}</p>\n        </v-container>\n        DB 연결 테스트 섹션 끝\n\n      </div>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { fetchShots, fetchProjects } from './api'\nimport axios from 'axios'; // axios 임포트 추가\n\nexport default {\n  setup() {\n    const projectName = ref('')\n    const projects = ref([])\n    const shots = ref([])\n\n    // DB 테스트 관련 변수 추가\n    const dbTestResult = ref(null);\n    dbTestError.ref(null);\n\n  onMounted(\n      async () => {\n        const projData = await fetchProjects()\n        projects.value = projData.projects || []\n    })\n\n    async function loadShots() {\n      const data = await fetchShots(projectName.value)\n      shots.value = data.shots || []\n    }\n\n    function clear() {\n      projectName.value = ''\n      shots.value = []\n    }\n\n    // DB 연결 테스트 메서드 추가\n    async function testDbConnection() {\n      dbTestResult.value = null;\n      dbTestError.value = null;\n      try {\n        const response = await axios.get('http://localhost:8001/db-test');\n        dbTestResult.value = response.data.message;\n      } catch (error) {\n        console.error('DB 연결 테스트 중 에러 발생:', error);\n        dbTestError.value = error.message;\n        if (error.response && error.response.data && error.response.data.message) {\n          dbTestError.value = error.response.data.message;\n        }\n      }\n    }\n\n    return {\n      projectName,\n      projects,\n      shots,\n      loadShots,\n      clear,\n      dbTestResult, // 반환 객체에 추가\n      dbTestError,  // 반환 객체에 추가\n      testDbConnection // 반환 객체에 추가\n    }\n  }\n}\n</script>\n\n<style src=\"./assets/styles.css\"></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}