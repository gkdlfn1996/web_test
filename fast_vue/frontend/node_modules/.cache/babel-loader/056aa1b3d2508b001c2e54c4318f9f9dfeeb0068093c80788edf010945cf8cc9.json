{"ast":null,"code":"import _regenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_LoginSection = _resolveComponent(\"LoginSection\");\n  var _component_v_alert = _resolveComponent(\"v-alert\");\n  var _component_ShotSelector = _resolveComponent(\"ShotSelector\");\n  var _component_VersionTable = _resolveComponent(\"VersionTable\");\n  var _component_v_container = _resolveComponent(\"v-container\");\n  var _component_v_main = _resolveComponent(\"v-main\");\n  var _component_v_app = _resolveComponent(\"v-app\");\n  return _openBlock(), _createBlock(_component_v_app, null, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_v_main, null, {\n        \"default\": _withCtx(function () {\n          return [_createCommentVNode(\" 로그인 섹션 (로그인되지 않았을 때만 표시) \"), !$setup.loggedInUser ? (_openBlock(), _createBlock(_component_LoginSection, {\n            key: 0,\n            username: $setup.username,\n            password: $setup.password,\n            loginError: $setup.loginError,\n            \"onUpdate:username\": _cache[0] || (_cache[0] = function ($event) {\n              return $setup.username = $event;\n            }),\n            \"onUpdate:password\": _cache[1] || (_cache[1] = function ($event) {\n              return $setup.password = $event;\n            }),\n            onLogin: _cache[2] || (_cache[2] = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n              return _regenerator().w(function (_context) {\n                while (1) switch (_context.n) {\n                  case 0:\n                    _context.n = 1;\n                    return $setup.login();\n                  case 1:\n                    return _context.a(2, _context.v);\n                }\n              }, _callee);\n            })))\n          }, null, 8 /* PROPS */, [\"username\", \"password\", \"loginError\"])) : $setup.loggedInUser ? (_openBlock(), _createElementBlock(_Fragment, {\n            key: 1\n          }, [_createCommentVNode(\" 로그인 성공 시 표시되는 메인 UI \"), _createVNode(_component_v_container, {\n            fluid: \"\",\n            \"class\": _normalizeClass({\n              'mt-5': $setup.loggedInUser\n            })\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_v_alert, {\n                type: \"success\",\n                dense: \"\",\n                text: \"\",\n                \"class\": \"mb-5\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createElementVNode(\"span\", null, \"환영합니다, \" + _toDisplayString($setup.loggedInUser) + \"!\", 1 /* TEXT */)];\n                }),\n                _: 1 /* STABLE */\n              }), _createCommentVNode(\" 샷 선택 컴포넌트 \"), _createVNode(_component_ShotSelector, {\n                projectName: $setup.projectName,\n                projects: $setup.projects,\n                shots: $setup.shots,\n                selectedShotName: $setup.selectedShotName,\n                \"onUpdate:projectName\": _cache[3] || (_cache[3] = function ($event) {\n                  return $setup.projectName = $event;\n                }),\n                \"onUpdate:selectedShotName\": _cache[4] || (_cache[4] = function ($event) {\n                  return $setup.selectedShotName = $event;\n                }),\n                onOnProjectSelected: $setup.onProjectSelected,\n                onLoadVersions: $setup.loadVersions,\n                onClear: $setup.clear\n              }, null, 8 /* PROPS */, [\"projectName\", \"projects\", \"shots\", \"selectedShotName\", \"onOnProjectSelected\", \"onLoadVersions\", \"onClear\"]), _createCommentVNode(\" 버전 테이블 컴포넌트 \"), _createVNode(_component_VersionTable, {\n                versions: $setup.versions,\n                notes: $setup.notesContent,\n                notesComposable: $setup.notes,\n                isSaving: $setup.isSaving,\n                onSaveNote: $setup.handleSaveNote,\n                onInputNote: $setup.handleInputNote\n              }, null, 8 /* PROPS */, [\"versions\", \"notes\", \"notesComposable\", \"isSaving\", \"onSaveNote\", \"onInputNote\"])];\n            }),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"class\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_app","_createVNode","_component_v_main","_createCommentVNode","$setup","loggedInUser","_component_LoginSection","username","password","loginError","_cache","$event","onLogin","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","login","a","v","_createElementBlock","_Fragment","key","_component_v_container","fluid","_normalizeClass","_component_v_alert","type","dense","text","_createElementVNode","_toDisplayString","_component_ShotSelector","projectName","projects","shots","selectedShotName","onOnProjectSelected","onProjectSelected","onLoadVersions","loadVersions","onClear","clear","_component_VersionTable","versions","notes","notesContent","notesComposable","isSaving","onSaveNote","handleSaveNote","onInputNote","handleInputNote"],"sources":["/home/idea/td_test/LAZYPIC/PONO/web_test/fast_vue/frontend/src/App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <!-- 로그인 섹션 (로그인되지 않았을 때만 표시) -->\n      <LoginSection\n        v-if=\"!loggedInUser\"\n        :username=\"username\"\n        :password=\"password\"\n        :loginError=\"loginError\"\n        @update:username=\"username = $event\"\n        @update:password=\"password = $event\"\n        @login=\"async () => await login()\"\n      />\n\n      <!-- 로그인 성공 시 표시되는 메인 UI -->\n      <v-container fluid v-else-if=\"loggedInUser\" :class=\"{'mt-5': loggedInUser}\">\n        <v-alert type=\"success\" dense text class=\"mb-5\">\n          <span>환영합니다, {{ loggedInUser }}!</span>\n        </v-alert>\n\n        <!-- 샷 선택 컴포넌트 -->\n        <ShotSelector\n          :projectName=\"projectName\"\n          :projects=\"projects\"\n          :shots=\"shots\"\n          :selectedShotName=\"selectedShotName\"\n          @update:projectName=\"projectName = $event\"\n          @update:selectedShotName=\"selectedShotName = $event\"\n          @onProjectSelected=\"onProjectSelected\"\n          @loadVersions=\"loadVersions\"\n          @clear=\"clear\"\n        />\n\n        <!-- 버전 테이블 컴포넌트 -->\n        <VersionTable\n          :versions=\"versions\"\n          :notes=\"notesContent\"\n          :notesComposable=\"notes\"\n          :isSaving=\"isSaving\"\n          @save-note=\"handleSaveNote\"\n          @input-note=\"handleInputNote\"\n        />\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { onMounted, computed, watch } from 'vue'; // onMounted는 App.vue에서 직접 사용\nimport useAuth from './composables/useAuth'; // 인증 로직\nimport useShotGridData from './composables/useShotGridData'; // ShotGrid 데이터 로직\nimport useNotes from './composables/useNotes'; // 노트 로직\nimport { fetchVersionsForShot } from './api'; // API 호출 함수\n\nimport LoginSection from './components/LoginSection.vue'; // 로그인 컴포넌트\nimport ShotSelector from './components/ShotSelector.vue'; // 샷 선택 컴포넌트\nimport VersionTable from './components/VersionTable.vue'; // 버전 테이블 컴포넌트\n\n\nexport default {\n  components: {\n    LoginSection,\n    ShotSelector,\n    VersionTable,\n  },\n  setup() {\n    const auth = useAuth();\n    const shotGridData = useShotGridData();\n    const notes = useNotes(auth.loggedInUserId);\n\n    // Create local computed property for isSaving\n    \n\n    // Watch for changes in notes.isSaving.value for debugging\n    watch(() => notes.isSaving.value, (newValue) => {\n      console.log('isSaving changed:', newValue);\n    });\n\n    // Create local wrapper functions for notes composable methods\n    const handleSaveNote = async (versionId, content) => {\n      // 진행중인 디바운스 저장이 있다면 취소\n      notes.debouncedSave.cancel();\n      // UI에 즉시 반영 (한글 입력 문제 해결을 위해)\n      notes.notesContent.value[versionId] = content;\n      await notes.saveImmediately(versionId, content);\n    };\n\n    const handleInputNote = (versionId, content) => {\n      // UI에 즉시 반영\n      notes.notesContent.value[versionId] = content;\n      notes.debouncedSave(versionId, content);\n    };\n\n    \n\n    // App.vue의 onMounted 로직\n    onMounted(async () => {\n      const storedUser = sessionStorage.getItem('loggedInUser');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        auth.loggedInUser.value = user.name; // useAuth의 loggedInUser 업데이트\n        auth.loggedInUserId.value = user.id; // useAuth의 loggedInUserId 업데이트\n      }\n      await shotGridData.loadProjects();\n    });\n\n    // loadVersions 함수는 App.vue에서 직접 관리 (ShotGridData와 Notes를 연결)\n    const loadVersions = async () => {\n      try {\n        const selectedShot = shotGridData.shots.value.find(s => s.code === shotGridData.selectedShotName.value);\n        if (!selectedShot) return;\n\n        const versionData = await fetchVersionsForShot(selectedShot.id);\n        const loadedVersions = versionData.versions || [];\n\n        // useNotes의 loadVersionNotes 함수를 호출하여 노트 데이터 로딩\n        await notes.loadVersionNotes(loadedVersions);\n\n        // 모든 데이터가 준비되면 버전 목록 업데이트 (UI 렌더링 유발)\n        shotGridData.setVersions(loadedVersions);\n\n      } catch (error) {\n        console.error(\"Error in loadVersions:\", error);\n        // 사용자에게 에러를 알리는 로직을 추가할 수 있습니다.\n      }\n    };\n\n    // Clear 함수 (App.vue에서 직접 관리)\n    const clear = () => { // useShotGridData의 clear 로직을 호출\n      shotGridData.projectName.value = '';\n      shotGridData.shots.value = [];\n      shotGridData.versions.value = [];\n      shotGridData.selectedShotName.value = '';\n      auth.loginError.value = null;\n      notes.notesContent.value = {}; // 노트 내용도 초기화\n    };\n\n    return {\n      // useAuth에서 노출된 속성/함수\n      username: auth.username,\n      password: auth.password,\n      loggedInUser: auth.loggedInUser,\n      loginError: auth.loginError,\n      login: auth.login,\n\n      // useShotGridData에서 노출된 속성/함수\n      projectName: shotGridData.projectName,\n      projects: shotGridData.projects,\n      shots: shotGridData.shots,\n      selectedShotName: shotGridData.selectedShotName,\n      versions: shotGridData.versions,\n      onProjectSelected: shotGridData.onProjectSelected,\n\n      // useNotes에서 노출된 속성/함수\n      notesContent: notes.notesContent, // notesContent ref 자체를 전달\n      notes: notes, // VersionTable에 notes composable 전체를 전달하기 위해 필요\n      isSaving: notes.isSaving, // useNotes의 isSaving을 직접 노출\n\n      // App.vue에서 직접 관리하는 속성/함수\n      loadVersions,\n      clear,\n      handleSaveNote,\n      handleInputNote,\n    };\n  },\n};\n</script>\n\n<style src=\"./assets/styles.css\"></style>"],"mappings":";;;;;;;;;;;uBACEA,YAAA,CA2CQC,gBAAA;wBA1CN;MAAA,OAyCS,CAzCTC,YAAA,CAyCSC,iBAAA;4BAxCP;UAAA,OAAiC,CAAjCC,mBAAA,8BAAiC,E,CAExBC,MAAA,CAAAC,YAAY,I,cADrBN,YAAA,CAQEO,uBAAA;;YANCC,QAAQ,EAAEH,MAAA,CAAAG,QAAQ;YAClBC,QAAQ,EAAEJ,MAAA,CAAAI,QAAQ;YAClBC,UAAU,EAAEL,MAAA,CAAAK,UAAU;YACtB,mBAAe,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;cAAA,OAAEP,MAAA,CAAAG,QAAQ,GAAGI,MAAM;YAAA;YAClC,mBAAe,EAAAD,MAAA,QAAAA,MAAA,gBAAAC,MAAA;cAAA,OAAEP,MAAA,CAAAI,QAAQ,GAAGG,MAAM;YAAA;YAClCC,OAAK,EAAAF,MAAA,QAAAA,MAAA,mBAAAG,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAC,QAAA;cAAA,OAAAF,YAAA,GAAAG,CAAA,WAAAC,QAAA;gBAAA,kBAAAA,QAAA,CAAAC,CAAA;kBAAA;oBAAAD,QAAA,CAAAC,CAAA;oBAAA,OAAoBf,MAAA,CAAAgB,KAAK;kBAAA;oBAAA,OAAAF,QAAA,CAAAG,CAAA,IAAAH,QAAA,CAAAI,CAAA;gBAAA;cAAA,GAAAN,OAAA;YAAA;6EAIHZ,MAAA,CAAAC,YAAY,I,cAA1CkB,mBAAA,CA2BcC,SAAA;YAAAC,GAAA;UAAA,IA5BdtB,mBAAA,yBAA4B,EAC5BF,YAAA,CA2BcyB,sBAAA;YA3BDC,KAAK,EAAL,EAAK;YAA2B,SAAKC,eAAA;cAAA,QAAWxB,MAAA,CAAAC;YAAY;;gCACvE;cAAA,OAEU,CAFVJ,YAAA,CAEU4B,kBAAA;gBAFDC,IAAI,EAAC,SAAS;gBAACC,KAAK,EAAL,EAAK;gBAACC,IAAI,EAAJ,EAAI;gBAAC,SAAM;;oCACvC;kBAAA,OAAuC,CAAvCC,mBAAA,CAAuC,cAAjC,SAAO,GAAAC,gBAAA,CAAG9B,MAAA,CAAAC,YAAY,IAAG,GAAC,gB;;;kBAGlCF,mBAAA,eAAkB,EAClBF,YAAA,CAUEkC,uBAAA;gBATCC,WAAW,EAAEhC,MAAA,CAAAgC,WAAW;gBACxBC,QAAQ,EAAEjC,MAAA,CAAAiC,QAAQ;gBAClBC,KAAK,EAAElC,MAAA,CAAAkC,KAAK;gBACZC,gBAAgB,EAAEnC,MAAA,CAAAmC,gBAAgB;gBAClC,sBAAkB,EAAA7B,MAAA,QAAAA,MAAA,gBAAAC,MAAA;kBAAA,OAAEP,MAAA,CAAAgC,WAAW,GAAGzB,MAAM;gBAAA;gBACxC,2BAAuB,EAAAD,MAAA,QAAAA,MAAA,gBAAAC,MAAA;kBAAA,OAAEP,MAAA,CAAAmC,gBAAgB,GAAG5B,MAAM;gBAAA;gBAClD6B,mBAAiB,EAAEpC,MAAA,CAAAqC,iBAAiB;gBACpCC,cAAY,EAAEtC,MAAA,CAAAuC,YAAY;gBAC1BC,OAAK,EAAExC,MAAA,CAAAyC;qJAGV1C,mBAAA,iBAAoB,EACpBF,YAAA,CAOE6C,uBAAA;gBANCC,QAAQ,EAAE3C,MAAA,CAAA2C,QAAQ;gBAClBC,KAAK,EAAE5C,MAAA,CAAA6C,YAAY;gBACnBC,eAAe,EAAE9C,MAAA,CAAA4C,KAAK;gBACtBG,QAAQ,EAAE/C,MAAA,CAAA+C,QAAQ;gBAClBC,UAAS,EAAEhD,MAAA,CAAAiD,cAAc;gBACzBC,WAAU,EAAElD,MAAA,CAAAmD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}